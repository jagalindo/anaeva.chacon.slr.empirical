% Encoding: UTF-8

@Article{Deelstra2005a,
  author        = {Sybren Deelstra and Marco Sinnema and Jan Bosch},
  title         = {Product derivation in software product families: a case study},
  journal       = {Journal of Systems and Software},
  year          = {2005},
  volume        = {74},
  number        = {2},
  pages         = {173 - 194},
  issn          = {0164-1212},
  note          = {The new context for software engineering education and training},
  __markedentry = {[mac:]},
  abstract      = {From our experience with several organizations that employ software product families, we have learned that, contrary to popular belief, deriving individual products from shared software assets is a time-consuming and expensive activity. In this paper we therefore present a study that investigated the source of those problems. We provide the reader with a framework of terminology and concepts regarding product derivation. In addition, we present several problems and issues we identified during a case study at two large industrial organizations that are relevant to other, for example, comparable or less mature organizations.},
  comment       = {22 Deelstra},
  doi           = {https://doi.org/10.1016/j.jss.2003.11.012},
  keywords      = {Case study, Software product family, Product derivation, Variability management},
  review        = {CE PM DRQ DD ARQ AD FE JOUR},
  url           = {http://www.sciencedirect.com/science/article/pii/S0164121203003121},
}

@Article{Zhang2014,
  author        = {Zhang, G. and Ye, H. and Lin, Y.},
  title         = {Quality attribute modeling and quality aware product configuration in software product lines},
  journal       = {Software Quality Journal},
  year          = {2014},
  volume        = {22},
  number        = {3},
  pages         = {365-401},
  note          = {cited By 14},
  abstract      = {In software product line engineering, the customers mostly concentrate on the functionalities of the target product during product configuration. The quality attributes of a target product, such as security and performance, are often assessed until the final product is generated. However, it might be very costly to fix the problem if it is found that the generated product cannot satisfy the customers’ quality requirements. Although the quality of a generated product will be affected by all the life cycles of product development, feature-based product configuration is the first stage where the estimation or prediction of the quality attributes should be considered. As we know, the key issue of predicting the quality attributes for a product configured from feature models is to measure the interdependencies between functional features and quality attributes. The current existing approaches have several limitations on this issue, such as requiring real products for the measurement or involving domain experts’ efforts. To overcome these limitations, we propose a systematic approach of modeling quality attributes in feature models based on domain experts’ judgments using the analytic hierarchical process (AHP) and conducting quality aware product configuration based on the captured quality knowledge. Domain experts’ judgments are adapted to avoid generating the real products for quality evaluation, and AHP is used to reduce domain experts’ efforts involved in the judgments. A prototype tool is developed to implement the concepts of the proposed approach, and a formal evaluation is carried out based on a large-scale case study. © 2013, Springer Science+Business Media New York.},
  comment       = {37},
  document_type = {Article},
  doi           = {10.1007/s11219-013-9197-z},
  review        = {CE DRQ ARQ JOUR},
  source        = {Scopus},
  url           = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84875049200&doi=10.1007%2fs11219-013-9197-z&partnerID=40&md5=ad822ef7f6b285eb153f76658a503708},
}

@Article{Bosch2011b,
  author        = {Bosch, J. and Bosch-Sijtsema, P.M.},
  title         = {Introducing agile customer-centered development in a legacy software product line},
  journal       = {Software - Practice and Experience},
  year          = {2011},
  volume        = {41},
  number        = {8},
  pages         = {871-882},
  note          = {cited By 20},
  abstract      = {The ability to rapidly respond to customer interest and to effectively prioritize development effort has been a long-standing challenge for mass-market software intensive products. This problem is exacerbated in the context of software product lines as functionality may easily fall over software asset and organizational boundaries with consequent losses in efficiency and nimbleness. Some companies facing these problems in their product line respond with a new development process. In this paper we discuss the developments within a single case study, Intuit's Quickbooks product line that combined agile software development, design thinking and self-organizing teams in a successful approach, which provided a significant improvement in terms of responsiveness and accuracy of building customer value. Copyright © 2011 John Wiley & Sons, Ltd.},
  comment       = {12},
  document_type = {Article},
  doi           = {10.1002/spe.1063},
  review        = {CE PM DRQ DD EE DT ARQ AD FE AT JOUR},
  source        = {Scopus},
  url           = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-79958247118&doi=10.1002%2fspe.1063&partnerID=40&md5=b2bfc7317e1d83ae546384531cf74963},
}

@Article{Hanssen2011,
  author        = {Hanssen, G.K.},
  title         = {Agile software product line engineering: Enabling factors},
  journal       = {Software - Practice and Experience},
  year          = {2011},
  volume        = {41},
  number        = {8},
  pages         = {883-897},
  note          = {cited By 5},
  abstract      = {This paper reports on a study of a software product line organization that has adopted agile software development to address process rigidity and slowing performance. Experience has showed that despite some impediments, this has become a valuable change to both the organization and its development process. The aim of this study is to identify and understand enabling factors of a combined process, and to understand their subsequent effects. Qualitative data are summarized and analyzed, giving insight into the actions taken, their effects that have emerged over time, and the enabling and contextual factors. The study concludes that a combined process is feasible, that the simplified approach makes the organization more flexible and thus capable of serving a volatile market with fast-changing technologies. This has also enabled the organization to collaborate better with external actors. Copyright © 2011 John Wiley & Sons, Ltd.},
  comment       = {15},
  document_type = {Article},
  doi           = {10.1002/spe.1064},
  review        = {CE PM DRQ DD EE DT ARQ AD FE AT JOUR},
  source        = {Scopus},
  url           = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-79958281206&doi=10.1002%2fspe.1064&partnerID=40&md5=c50cda5a08c3f2e8eb05f37a2cdc5aa3},
}

@Article{Eklund2013,
  author   = {Ulrik Eklund and Håkan Gustavsson},
  title    = {Architecting automotive product lines: Industrial practice},
  journal  = {Science of Computer Programming},
  year     = {2013},
  volume   = {78},
  number   = {12},
  pages    = {2347 - 2359},
  issn     = {0167-6423},
  note     = {Special Section on International Software Product Line Conference 2010 and Fundamentals of Software Engineering (selected papers of FSEN 2011)},
  abstract = {This paper presents an in-depth view of how architects work with maintaining product line architectures at two internationally well-known automotive companies. The case study shows several interesting results. The process of managing architectural changes as well as the information the architects maintain and update is surprisingly similar between the two companies, despite that one has a strong line organisation and the other a strong project organisation. The architecting process found does not differ from what can be seen in other business domains. What does differ is that the architects studied see themselves interacting much more with other stakeholders than architects in general. The actual architectures are based on similar technology, e.g. CAN, but the network topology, S/W deployment and interfaces are totally different. The results indicate how the company’s different core values influence the architects when defining and maintaining the architectures over time. One company maintains four similar architectures in parallel, each at a different stage in their respective life-cycle, while the other has a single architecture for all products since 2002. The organisational belonging of the architects in the former company has been turbulent in contrast to the latter and there is some speculation if this is correlated.},
  comment  = {13},
  doi      = {https://doi.org/10.1016/j.scico.2012.06.008},
  keywords = {Architecting, Process, Case study, Automotive industry},
  review   = {CE DD AD JOUR},
  url      = {http://www.sciencedirect.com/science/article/pii/S0167642312001190},
}

@Article{Classen2011a,
  author   = {Andreas Classen and Quentin Boucher and Patrick Heymans},
  title    = {A text-based approach to feature modelling: Syntax and semantics of TVL},
  journal  = {Science of Computer Programming},
  year     = {2011},
  volume   = {76},
  number   = {12},
  pages    = {1130 - 1143},
  issn     = {0167-6423},
  note     = {Special Issue on Software Evolution, Adaptability and Variability},
  abstract = {In the scientific community, feature models are the de-facto standard for representing variability in software product line engineering. This is different from industrial settings where they appear to be used much less frequently. We and other authors found that in a number of cases, they lack concision, naturalness and expressiveness. This is confirmed by industrial experience. When modelling variability, an efficient tool for making models intuitive and concise are feature attributes. Yet, the semantics of feature models with attributes is not well understood and most existing notations do not support them at all. Furthermore, the graphical nature of feature models’ syntax also appears to be a barrier to industrial adoption, both psychological and rational. Existing tool support for graphical feature models is lacking or inadequate, and inferior in many regards to tool support for text-based formats. To overcome these shortcomings, we designed TVL, a text-based feature modelling language. In terms of expressiveness, TVL subsumes most existing dialects. The main goal of designing TVL was to provide engineers with a human-readable language with a rich syntax to make modelling easy and models natural, but also with a formal semantics to avoid ambiguity and allow powerful automation.},
  comment  = {14},
  doi      = {https://doi.org/10.1016/j.scico.2010.10.005},
  keywords = {Feature models, Code, Modelling, Language, Syntax, Semantics, Software product lines},
  review   = {CE DRQ JOUR},
  url      = {http://www.sciencedirect.com/science/article/pii/S0167642310001899},
}

@Article{Diaz2015,
  author        = {Díaz, J. and Pérez, J. and Garbajosa, J.},
  title         = {A model for tracing variability from features to product-line architectures: A case study in smart grids},
  journal       = {Requirements Engineering},
  year          = {2015},
  volume        = {20},
  number        = {3},
  pages         = {323-343},
  note          = {cited By 6},
  abstract      = {In current software systems with highly volatile requirements, traceability plays a key role to maintain the consistency between requirements and code. Traceability between artifacts involved in the development of software product line (SPL) is still more critical because it is necessary to guarantee that the selection of variants that realize the different SPL products meet the requirements. Current SPL traceability mechanisms trace from variability in features to variations in the configuration of product-line architecture (PLA) in terms of adding and removing components. However, it is not always possible to materialize the variable features of a SPL through adding or removing components, since sometimes they are materialized inside components, i.e., in part of their functionality: a class, a service, and/or an interface. Additionally, variations that happen inside components may crosscut several components of architecture. These kinds of variations are still challenging and their traceability is not currently well supported. Therefore, it is not possible to guarantee that those SPL products with these kinds of vriations meet the requirements. This paper presents a solution for tracing variability from features to PLA by taking these kinds of variations into account. This solution is based on models and traceability between models in order to automate SPL configuration by selecting the variants and realizing the product application. The FPLA modeling framework supports this solution which has been deployed in a software factory. Validation has consisted in putting the solution into practice to develop a product line of power metering management applications for smart grids. © Springer-Verlag London 2014.},
  art_number    = {A003},
  comment       = {21},
  document_type = {Article},
  doi           = {10.1007/s00766-014-0203-1},
  review        = {CE PM DRQ DD JOUR},
  source        = {Scopus},
  url           = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84943353769&doi=10.1007%2fs00766-014-0203-1&partnerID=40&md5=2b9700810f69105f1098e29cc8ca542c},
}

@Article{Oliveira2014a,
  author        = {de Oliveira, R.P. and Blanes, D. and Gonzalez-Huerta, J. and Insfran, E. and Abrahão, S. and Cohen, S. and de Almeida, E.S.},
  title         = {Defining and validating a feature-driven requirements engineering approach},
  journal       = {Journal of Universal Computer Science},
  year          = {2014},
  volume        = {20},
  number        = {5},
  pages         = {666-691},
  note          = {cited By 1},
  abstract      = {The specification of requirements is a key activity for achieving the goals of any software project and it has long been established and recognized by researchers and practitioners. Within Software Product Lines (SPL), this activity is even more critical owing to the need to deal with common, variable, and product-specific requirements, not only for a single product but for the whole set of products. In this paper, we present a Feature-Driven Requirements Engineering approach (FeDRE) that provides support to the requirements specification of SPL. The approach realizes features into functional requirements by considering the variability captured in a feature model. It also provides detailed guidelines on how to associate chunks of features from a feature model and to consider them as the context for the Use Case specification. The evaluation of the approach is illustrated in a case study for developing an SPL of mobile applications for emergency notifications. This case study was applied within 14 subjects, 8 subjects from Universitat Politècnica de València and 6 subjects from Federal University of Bahia. Evaluations concerning the perceived ease of use, perceived usefulness, effectiveness and efficiency as regards requirements analysts using the approach are also presented. The results show that FeDRE was perceived as easy to learn and useful by the participants. © J.UCS.},
  comment       = {26},
  document_type = {Article},
  review        = {CE PM DRQ JOUR},
  source        = {Scopus},
  url           = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84904769020&partnerID=40&md5=31d21d19a0249965fa4b5f0742277f51},
}

@Article{Bastos2017a,
  author        = {Jonatas Ferreira Bastos and Paulo Anselmo da Mota Silveira Neto and Pádraig O’Leary and Eduardo Santana de Almeida and Silvio Romero de Lemos Meira},
  title         = {Software product lines adoption in small organizations},
  journal       = {Journal of Systems and Software},
  year          = {2017},
  volume        = {131},
  pages         = {112 - 128},
  issn          = {0164-1212},
  __markedentry = {[mac:2]},
  abstract      = {Context
An increasing number of studies has demonstrated improvements in product quality, and time-to-market reductions when Software Product Line (SPL) engineering is introduced. However, despite the amount of successful stories about the use of SPL engineering, there is a lack of guidelines to support its adoption, especially to small-sized software organizations.
Objective
The aim of this study is to investigate SPL adoption in small organizations and to improve the generalization of evidence through the use of a multi-method approach.
Method
This paper reports on a multi-method study, where results from a mapping study, industrial case study and also expert opinion survey were considered to identify a set of findings.
Results
The study provides a better understanding of SPL adoption in the context of small to medium-sized organizations, by documenting evidence observed during the transition from single-system development to an SPL approach. This evidence is strengthened by the use of different research methods, which results in 22 findings regarding to the SPL adoption.
Conclusion
This research has synthesized the available evidence in SPL adoption and identifies gaps between required strategies, organizational structures, maturity level and existing adoption barriers. These findings are an important step to establish guidelines for SPL adoption.},
  comment       = {17 eduardo},
  doi           = {https://doi.org/10.1016/j.jss.2017.05.052},
  keywords      = {Software product lines, SPL adoption, Adoption barriers, Multi-method approach, Case study, Survey, Mapping study},
  review        = {CE PM DRQ DD EE DT ARQ AD FE AT JOUR},
  url           = {http://www.sciencedirect.com/science/article/pii/S0164121217300997},
}

@Article{DaSilva2014,
  author        = {Da Silva, I.F. and Da Mota Silveira Neto, P.A. and O'Leary, P. and De Almeida, E.S. and Meira, S.R.D.L.},
  title         = {Software product line scoping and requirements engineering in a small and medium-sized enterprise: An industrial case study},
  journal       = {Journal of Systems and Software},
  year          = {2014},
  volume        = {88},
  number        = {1},
  pages         = {189-206},
  note          = {cited By 9},
  abstract      = {Software product line (SPL) engineering has been applied in several domains, especially in large-scale software development. Given the benefits experienced and reported, SPL engineering has increasingly garnered interest from small to medium-sized companies. It is possible to find a wide range of studies reporting on the challenges of running a SPL project in large companies. However, very little reports exist that consider the situation for small to medium-sized enterprises and these studies try develop universal truths for SPL without lessons learned from empirical evidence need to be contextualized. This study is a step towards bridging this gap in contextual evidence by characterizing the weaknesses discovered in the scoping (SC) and requirements (RE) disciplines of SPL. Moreover, in this study we conducted a case study in a small to medium sized enterprises (SMEs) to justify the use of agile methods when introducing the SPL SC and RE disciplines through the characterization of their bottlenecks. The results of the characterization indicated that ineffective communication and collaboration, long iteration cycles, and the absence of adaptability and flexibility can increase the effort and reduce motivation during project development. These issues can be mitigated by agile methods. © 2013 Elsevier Inc. All rights reserved.},
  comment       = {18},
  document_type = {Article},
  doi           = {10.1016/j.jss.2013.10.040},
  review        = {CE PM DRQ JOUR},
  source        = {Scopus},
  url           = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84891625335&doi=10.1016%2fj.jss.2013.10.040&partnerID=40&md5=dd69d4becd8b94d2bc063e89827148e2},
}

@Article{Souza2013b,
  author   = {Iuri Santos Souza and Gecynalda Soares da Silva Gomes and Paulo Anselmo da Mota Silveira Neto and Ivan do Carmo Machado and Eduardo Santana de Almeida and Silvio Romero de Lemos Meira},
  title    = {Evidence of software inspection on feature specification for software product lines},
  journal  = {Journal of Systems and Software},
  year     = {2013},
  volume   = {86},
  number   = {5},
  pages    = {1172 - 1190},
  issn     = {0164-1212},
  abstract = {In software product lines (SPL), scoping is a phase responsible for capturing, specifying and modeling features, and also their constraints, interactions and variations. The feature specification task, performed in this phase, is usually based on natural language, which may lead to lack of clarity, non-conformities and defects. Consequently, scoping analysts may introduce ambiguity, inconsistency, omissions and non-conformities. In this sense, this paper aims at gathering evidence about the effects of applying an inspection approach to feature specification for SPL. Data from a SPL reengineering project were analyzed in this work and the analysis indicated that the correction activity demanded more effort. Also, Pareto's principle showed that incompleteness and ambiguity reported higher non-conformity occurrences. Finally, the Poisson regression analysis showed that sub-domain risk information can be a good indicator for prioritization of sub-domains in the inspection activity.},
  comment  = {19 eduardo},
  doi      = {https://doi.org/10.1016/j.jss.2012.11.044},
  keywords = {Software quality control, Software inspection, Software product lines, Empirical study},
  review   = {CE PM DRQ JOUR},
  url      = {http://www.sciencedirect.com/science/article/pii/S0164121212003251},
}

@Article{Hanssen2008,
  author        = {Hanssen, G.K. and Fægri, T.E.},
  title         = {Process fusion: An industrial case study on agile software product line engineering},
  journal       = {Journal of Systems and Software},
  year          = {2008},
  volume        = {81},
  number        = {6},
  pages         = {843-854},
  note          = {cited By 49},
  abstract      = {This paper presents a case study of a software product company that has successfully integrated practices from software product line engineering and agile software development. We show how practices from the two fields support the company's strategic and tactical ambitions, respectively. We also discuss how the company integrates strategic, tactical and operational processes to optimize collaboration and consequently improve its ability to meet market needs, opportunities and challenges. The findings from this study are relevant to software product companies seeking ways to balance agility and product management. The findings also contribute to research on industrializing software engineering. © 2007 Elsevier Inc. All rights reserved.},
  comment       = {12},
  document_type = {Article},
  doi           = {10.1016/j.jss.2007.10.025},
  review        = {CE PM DRQ DD EE DT ARQ AD FE AT JOUR},
  source        = {Scopus},
  url           = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-42049088680&doi=10.1016%2fj.jss.2007.10.025&partnerID=40&md5=70bc5b3b44f009b164aebff9608f2e82},
}

@Article{Eriksson2009,
  author        = {Eriksson, M. and Börstler, J. and Borg, K.},
  title         = {Managing requirements specifications for product lines - An approach and industry case study},
  journal       = {Journal of Systems and Software},
  year          = {2009},
  volume        = {82},
  number        = {3},
  pages         = {435-447},
  note          = {cited By 33},
  abstract      = {Software product line development has emerged as a leading approach for software reuse. This paper describes an approach to manage natural-language requirements specifications in a software product line context. Variability in such product line specifications is modeled and managed using a feature model. The proposed approach has been introduced in the Swedish defense industry. We present a multiple-case study covering two different product lines with in total eight product instances. These were compared to experiences from previous projects in the organization employing clone-and-own reuse. We conclude that the proposed product line approach performs better than clone-and-own reuse of requirements specifications in this particular industrial context. © 2008 Elsevier Inc. All rights reserved.},
  comment       = {13},
  document_type = {Article},
  doi           = {10.1016/j.jss.2008.07.046},
  review        = {CE DRQ JOUR},
  source        = {Scopus},
  url           = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-61349133483&doi=10.1016%2fj.jss.2008.07.046&partnerID=40&md5=0a3ae64dcba52802d30b67dc41cef4f1},
}

@Article{Ahmed2007b,
  author   = {Faheem Ahmed and Luiz Fernando Capretz and Shahbaz Ali Sheikh},
  title    = {Institutionalization of software product line: An empirical investigation of key organizational factors},
  journal  = {Journal of Systems and Software},
  year     = {2007},
  volume   = {80},
  number   = {6},
  pages    = {836 - 849},
  issn     = {0164-1212},
  abstract = {A good fit between the person and the organization is essential in a better organizational performance. This is even more crucial in case of institutionalization of a software product line practice within an organization. Employees’ participation, organizational behavior and management contemplation play a vital role in successfully institutionalizing software product lines in a company. Organizational dimension has been weighted as one of the critical dimensions in software product line theory and practice. A comprehensive empirical investigation to study the impact of some organizational factors on the performance of software product line practice is presented in this work. This is the first study to empirically investigate and demonstrate the relationships between some of the key organizational factors and software product line performance of an organization. The results of this investigation provide empirical evidence and further support the theoretical foundations that in order to institutionalize software product lines within an organization, organizational factors play an important role.},
  comment  = {14},
  doi      = {https://doi.org/10.1016/j.jss.2006.09.010},
  keywords = {Software product line, Empirical software engineering, Organizational theory, Organizational management, Organizational behavior},
  review   = {CE PM JOUR},
  url      = {http://www.sciencedirect.com/science/article/pii/S0164121206002627},
}

@Article{Kim2008b,
  author        = {Jintae Kim and Sooyong Park and Vijayan Sugumaran},
  title         = {DRAMA: A framework for domain requirements analysis and modeling architectures in software product lines},
  journal       = {Journal of Systems and Software},
  year          = {2008},
  volume        = {81},
  number        = {1},
  pages         = {37 - 55},
  issn          = {0164-1212},
  __markedentry = {[mac:2]},
  abstract      = {One of the benefits of software product line approach is to improve time-to-market. The changes in market needs cause software requirements to be flexible in product lines. Whenever software requirements are changed, software architecture should be evolved to correspond with them. Therefore, domain architecture should be designed based on domain requirements. It is essential that there is traceability between requirements and architecture, and that the structure of architecture is derived from quality requirements. The purpose of this paper is to provide a framework for modeling domain architecture based on domain requirements within product lines. In particular, we focus on the traceable relationship between requirements and architectural structures. Our framework consists of processes, methods, and a supporting tool. It uses four basic concepts, namely, goal based domain requirements analysis, Analytical Hierarchy Process, Matrix technique, and architecture styles. Our approach is illustrated using HIS (Home Integration System) product line. Finally, industrial examples are used to validate DRAMA.},
  comment       = {19},
  doi           = {https://doi.org/10.1016/j.jss.2007.04.011},
  keywords      = {Domain requirements, Domain architecture, Traceability, Quality attribute},
  review        = {CE DRQ DD JOUR},
  url           = {http://www.sciencedirect.com/science/article/pii/S016412120700088X},
}

@Article{Usman2017a,
  author   = {Muhammad Usman and Muhammad Zohaib Iqbal and Muhammad Uzair Khan},
  title    = {A product-line model-driven engineering approach for generating feature-based mobile applications},
  journal  = {Journal of Systems and Software},
  year     = {2017},
  volume   = {123},
  pages    = {1 - 32},
  issn     = {0164-1212},
  abstract = {A significant challenge faced by the mobile application industry is developing and maintaining multiple native variants of mobile applications to support different mobile operating systems, devices and varying application functional requirements. The current industrial practice is to develop and maintain these variants separately. Any potential change has to be applied across variants manually, which is neither efficient nor scalable. We consider the problem of supporting multiple platforms as a ‘software product-line engineering’ problem. The paper proposes a novel application of product-line model-driven engineering to mobile application development and addresses the key challenges of feature-based native mobile application variants for multiple platforms. Specifically, we deal with three types of variations in mobile applications: variation due to operation systems and their versions, software and hardware capabilities of mobile devices, and functionalities offered by the mobile application. We develop a tool MOPPET that automates the proposed approach. Finally, the results of applying the approach on two industrial case studies show that the proposed approach is applicable to industrial mobile applications and have potential to significantly reduce the development effort and time.},
  comment  = {32},
  doi      = {https://doi.org/10.1016/j.jss.2016.09.049},
  keywords = {Mobile applications, Software product-line engineering, Feature model},
  review   = {CE DRQ JOUR},
  url      = {http://www.sciencedirect.com/science/article/pii/S0164121216301972},
}

@Article{Costa2015a,
  author   = {Gabriella Castro B. Costa and Regina Braga and José Maria N. David and Fernanda Campos},
  title    = {A Scientific Software Product Line for the Bioinformatics domain},
  journal  = {Journal of Biomedical Informatics},
  year     = {2015},
  volume   = {56},
  pages    = {239 - 264},
  issn     = {1532-0464},
  abstract = {Context
Most specialized users (scientists) that use bioinformatics applications do not have suitable training on software development. Software Product Line (SPL) employs the concept of reuse considering that it is defined as a set of systems that are developed from a common set of base artifacts. In some contexts, such as in bioinformatics applications, it is advantageous to develop a collection of related software products, using SPL approach. If software products are similar enough, there is the possibility of predicting their commonalities, differences and then reuse these common features to support the development of new applications in the bioinformatics area.
Objectives
This paper presents the PL-Science approach which considers the context of SPL and ontology in order to assist scientists to define a scientific experiment, and to specify a workflow that encompasses bioinformatics applications of a given experiment. This paper also focuses on the use of ontologies to enable the use of Software Product Line in biological domains.
Method
In the context of this paper, Scientific Software Product Line (SSPL) differs from the Software Product Line due to the fact that SSPL uses an abstract scientific workflow model. This workflow is defined according to a scientific domain and using this abstract workflow model the products (scientific applications/algorithms) are instantiated.
Results
Through the use of ontology as a knowledge representation model, we can provide domain restrictions as well as add semantic aspects in order to facilitate the selection and organization of bioinformatics workflows in a Scientific Software Product Line. The use of ontologies enables not only the expression of formal restrictions but also the inferences on these restrictions, considering that a scientific domain needs a formal specification.
Conclusions
This paper presents the development of the PL-Science approach, encompassing a methodology and an infrastructure, and also presents an approach evaluation. This evaluation presents case studies in bioinformatics, which were conducted in two renowned research institutions in Brazil.},
  comment  = {26},
  doi      = {https://doi.org/10.1016/j.jbi.2015.05.014},
  keywords = {Scientific workflow, Sequence alignment, Software Product Line, Ontology, Feature model},
  review   = {CE EE JOUR},
  url      = {http://www.sciencedirect.com/science/article/pii/S1532046415000945},
}

@Article{Galster2015,
  author   = {Matthias Galster and Paris Avgeriou},
  title    = {An industrial case study on variability handling in large enterprise software systems},
  journal  = {Information and Software Technology},
  year     = {2015},
  volume   = {60},
  pages    = {16 - 31},
  issn     = {0950-5849},
  abstract = {Context
Enterprise software systems (e.g., enterprise resource planning software) are often deployed in different contexts (e.g., different organizations or different business units or branches of one organization). However, even though organizations, business units or branches have the same or similar business goals, they may differ in how they achieve these goals. Thus, many enterprise software systems are subject to variability and adapted depending on the context in which they are used.
Objective
Our goal is to provide a snapshot of variability in large scale enterprise software systems. We aim at understanding the types of variability that occur in large industrial enterprise software systems. Furthermore, we aim at identifying how variability is handled in such systems.
Method
We performed an exploratory case study in two large software organizations, involving two large enterprise software systems. Data were collected through interviews and document analysis. Data were analyzed following a grounded theory approach.
Results
We identified seven types of variability (e.g., functionality, infrastructure) and eight mechanisms to handle variability (e.g., add-ons, code switches).
Conclusions
We provide generic types for classifying variability in enterprise software systems, and reusable mechanisms for handling such variability. Some variability types and handling mechanisms for enterprise software systems found in the real world extend existing concepts and theories. Others confirm findings from previous research literature on variability in software in general and are therefore not specific to enterprise software systems. Our findings also offer a theoretical foundation for describing variability handling in practice. Future work needs to provide more evaluations of the theoretical foundations, and refine variability handling mechanisms into more detailed practices.},
  comment  = {16},
  doi      = {https://doi.org/10.1016/j.infsof.2014.12.003},
  keywords = {Variability, Enterprise software systems, Case study, Grounded theory},
  review   = {CE PM DRQ DD JOUR},
  url      = {http://www.sciencedirect.com/science/article/pii/S0950584914002572},
}

@Article{Diaz2014,
  author        = {Díaz, J. and Pérez, J. and Garbajosa, J.},
  title         = {Agile product-line architecting in practice: A case study in smart grids},
  journal       = {Information and Software Technology},
  year          = {2014},
  volume        = {56},
  number        = {7},
  pages         = {727-748},
  note          = {cited By 14},
  abstract      = {Context Software Product Line Engineering implies the upfront design of a Product-Line Architecture (PLA) from which individual product applications can be engineered. The big upfront design associated with PLAs is in conflict with the current need of "being open to change". To make the development of product-lines more flexible and adaptable to changes, several companies are adopting Agile Product Line Engineering. However, to put Agile Product Line Engineering into practice it is still necessary to make mechanisms available to assist and guide the agile construction and evolution of PLAs. Objective This paper presents the validation of a process for "the agile construction and evolution of product-line architectures", called Agile Product-Line Architecting (APLA). The contribution of the APLA process is the integration of a set of models for describing, documenting, and tracing PLAs, as well as an algorithm for guiding the change decision-making process of PLAs. The APLA process is assessed to prove that assists Agile Product Line Engineering practitioners in the construction and evolution of PLAs. Method Validation is performed through a case study by using both quantitative and qualitative analysis. Quantitative analysis was performed using statistics, whereas qualitative analysis was performed through interviews using constant comparison, triangulation, and supporting tools. This case study was conducted according to the guidelines of Runeson and Höst in a software factory where three projects in the domain of Smart Grids were involved. Results APLA is deployed through the Flexible-PLA modeling framework. This framework supported the successful development and evolution of the PLA of a family of power metering management applications for Smart Grids. Conclusions APLA is a well-supported solution for the agile construction and evolution of PLAs. This case study illustrates that the proposed solution for the agile construction of PLAs is viable in an industry project on Smart Grids. © 2014 Elsevier B.V. All rights reserved.},
  comment       = {22},
  document_type = {Article},
  doi           = {10.1016/j.infsof.2014.01.014},
  review        = {CE DD JOUR},
  source        = {Scopus},
  url           = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84898810060&doi=10.1016%2fj.infsof.2014.01.014&partnerID=40&md5=79cd1ad172a29071b1a41d63ef7c884c},
}

@Article{Engstroem2013a,
  author   = {Emelie Engström and Per Runeson},
  title    = {Test overlay in an emerging software product line – An industrial case study},
  journal  = {Information and Software Technology},
  year     = {2013},
  volume   = {55},
  number   = {3},
  pages    = {581 - 594},
  issn     = {0950-5849},
  note     = {Special Issue on Software Reuse and Product Lines},
  abstract = {Context
In large software organizations with a product line development approach, system test planning and scope selection is a complex task. Due to repeated testing: across different testing levels, over time (test for regression) as well as of different variants, the risk of redundant testing is large as well as the risk of overlooking important tests, hidden by the huge amount of possible tests.
Aims
This study assesses the amount and type of overlaid manual testing across feature, integration and system test in such context, it explores the causes of potential redundancy and elaborates on how to provide decision support in terms of visualization for the purpose of avoiding redundancy.
Method
An in-depth case study was launched including both qualitative and quantitative observations.
Results
A high degree of test overlay is identified originating from distributed test responsibilities, poor documentation and structure of test cases, parallel work and insufficient delta analysis. The amount of test overlay depends on which level of abstraction is studied.
Conclusions
Avoiding redundancy requires tool support, e.g. visualization of test design coverage, test execution progress, priorities of coverage items as well as visualized priorities of variants to support test case selection.},
  comment  = {14},
  doi      = {https://doi.org/10.1016/j.infsof.2012.04.009},
  keywords = {Product-line, Software testing, Case study, Overlay, Redundancy, Efficiency},
  review   = {CE DT AT JOUR},
  url      = {http://www.sciencedirect.com/science/article/pii/S0950584912001061},
}

@Article{Dey2017,
  author   = {Sangeeta Dey and Seok-Won Lee},
  title    = {REASSURE: Requirements elicitation for adaptive socio-technical systems using repertory grid},
  journal  = {Information and Software Technology},
  year     = {2017},
  volume   = {87},
  pages    = {160 - 179},
  issn     = {0950-5849},
  abstract = {Context
Socio-technical systems are expected to understand the dynamics of the execution environment and behave accordingly. Significant work has been done on formalizing and modeling requirements of such adaptive systems. However, not enough attention is paid on eliciting requirements from users and introducing flexibility in the system behavior at an early phase of requirements engineering. Most of the work is based on an assumption that general users’ cognitive level would be able to support the inherent complexity of variability acquisition.
Objective
Our main focus is on providing help to the users with ordinary cognitive level to express their expectations from the complex system considering various contexts. This work also helps the designers to explore the design variability based on the general users’ preferences.
Method
We explore the idea of using a cognitive technique Repertory Grid (RG) to acquire knowledge from users and experts along multiple dimensions of problem and design space. We propose REASSURE methodology which guides requirements engineers to explore the intentional and design variability in an organized way. We also provide a tool support to analyze the knowledge captured in multiple repertory grid files and detect potential conflicts in the intentional variability. Finally, we evaluate the proposed idea by performing an empirical study using smart home system domain.
Results
The result of our study shows that a greater number of requirements can be elicited after applying our approach. With the help of the provided tool support, it is even possible to detect a greater number of conflicts in user’s requirements than the traditional practices.
Conclusion
We envision RG as a technique to filter design options based on the intentional variability in various contexts. The promising results of empirical study open up new research questions: “how to elicit requirements from multiple stakeholders and reach consensus for multi-dimensional problem domain”.},
  comment  = {20},
  doi      = {https://doi.org/10.1016/j.infsof.2017.03.004},
  keywords = {Requirements elicitation, Adaptive systems, Socio-technical systems, Repertory grid},
  review   = {CE DRQ JOUR},
  url      = {http://www.sciencedirect.com/science/article/pii/S095058491730229X},
}

@Article{Silva2015,
  author   = {Ivonei Freitas da Silva and Paulo Anselmo da Mota Silveira Neto and Pádraig O’Leary and Eduardo Santana de Almeida and Silvio Romero de Lemos Meira},
  title    = {Using a multi-method approach to understand Agile software product lines},
  journal  = {Information and Software Technology},
  year     = {2015},
  volume   = {57},
  pages    = {527 - 542},
  issn     = {0950-5849},
  abstract = {Context
Software product lines (SPLs) and Agile are approaches that share similar objectives. The main difference is the way in which these objectives are met. Typically evidence on what activities of Agile and SPL can be combined and how they can be integrated stems from different research methods performed separately. The generalizability of this evidence is low, as the research topic is still relatively new and previous studies have been conducted using only one research method.
Objective
This study aims to increase understanding of Agile SPL and improve the generalizability of the identified evidence through the use of a multi-method approach.
Method
Our multi-method research combines three complementary methods (Mapping Study, Case Study and Expert Opinion) to consolidate the evidence.
Results
This combination results in 23 findings that provide evidence on how Agile and SPL could be combined.
Conclusion
Although multi-method research is time consuming and requires a high degree of effort to plan, design, and perform, it helps to increase the understanding on Agile SPL and leads to more generalizable evidence. The findings confirm a synergy between Agile and SPL and serve to improve the body of evidence in Agile SPL. When researchers and practitioners develop new Agile SPL approaches, it will be important to consider these synergies.},
  comment  = {16 eduardo},
  doi      = {https://doi.org/10.1016/j.infsof.2014.06.004},
  keywords = {Agile, Software product lines, Multi-method approach, Case study, Mapping study, Expert opinion},
  review   = {CE PM DRQ JOUR},
  url      = {http://www.sciencedirect.com/science/article/pii/S0950584914001438},
}

@Article{DeSouza2015,
  author        = {De Souza, L.O. and O'Leary, P. and De Almeida, E.S. and De Lemos Meira, S.R.},
  title         = {Product derivation in practice},
  journal       = {Information and Software Technology},
  year          = {2015},
  volume        = {58},
  pages         = {319-337},
  note          = {cited By 1},
  abstract      = {Context: The process of constructing a product from a product line of software assets is known product derivation. An effective product derivation process is important in order to ensure that the efforts required to develop these shared assets is lower than the benefits achieved through their use. Despite its importance, relatively little work has been dedicated to the product derivation process and the strategies applied in practice. Additionally, there is a lack of empirical reports describing product derivation in industrial settings, and, in general, where these reports are available, they have been conducted as informal studies. Objective: Our aim is to investigate how product derivation is performed in practice. Method: We apply a multi-case study design to two different industrial software product line projects with the goal of investigating how they derive their products in practice. The findings from our studies were individually analyzed using the Constant Comparison technique. In order to identify patterns across these studies, the findings were compared using a Cross-case analysis approach. Results: The research approach allowed us to examine the case study outcomes from different perspectives, capturing similarities and differences. From the cases, we identified context specific strategies for product derivation which are easier for practitioners to contextualise and implement. Conclusions: The case studies provide method-in-action insights into concepts explored in the literature, such as: iterative and incremental product derivation, instantiation and integration of platform components and derivation of product databases. Practitioners can use this work as a basis for defining, adapting or evaluating their own product derivation approaches. While researchers can use this work as a starting point for new industrial reports, presenting their experiences with product derivation. © 2014 Elsevier B.V. All rights reserved.},
  comment       = {19},
  document_type = {Article},
  doi           = {10.1016/j.infsof.2014.07.004},
  review        = {CE PM DRQ DD ARQ AD JOUR},
  source        = {Scopus},
  url           = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84914144344&doi=10.1016%2fj.infsof.2014.07.004&partnerID=40&md5=161e2856a77bae190e2fc6e05556a2fe},
}

@Article{Deelstra2009,
  author   = {Sybren Deelstra and Marco Sinnema and Jan Bosch},
  title    = {Variability assessment in software product families},
  journal  = {Information and Software Technology},
  year     = {2009},
  volume   = {51},
  number   = {1},
  pages    = {195 - 218},
  issn     = {0950-5849},
  note     = {Special Section - Most Cited Articles in 2002 and Regular Research Papers},
  abstract = {Software variability management is a key factor in the success of software systems and software product families. An important aspect of software variability management is the evolution of variability in response to changing markets, business needs, and advances in technology. To be able to determine whether, when, and how variability should evolve, we have developed the COVAMOF software variability assessment method (COSVAM). The contribution of COSVAM is that it is a novel, and industry-strength assessment process that addresses the issues that are associated to the current variability assessment practice. In this paper, we present the successful validation of COSVAM in an industrial software product family.},
  comment  = {24 Deelstra},
  doi      = {https://doi.org/10.1016/j.infsof.2008.04.002},
  keywords = {Software product families, Variability, Assessment, Evolution},
  review   = {CE PM DRQ JOUR},
  url      = {http://www.sciencedirect.com/science/article/pii/S0950584908000542},
}

@Article{Koziolek2016,
  author        = {Koziolek, H. and Goldschmidt, T. and de Gooijer, T. and Domis, D. and Sehestedt, S. and Gamer, T. and Aleksy, M.},
  title         = {Assessing software product line potential: an exploratory industrial case study},
  journal       = {Empirical Software Engineering},
  year          = {2016},
  volume        = {21},
  number        = {2},
  pages         = {411-448},
  note          = {cited By 4},
  abstract      = {Corporate organizations sometimes offer similar software products in certain domains due to former company mergers or due to the complexity of the organization. The functional overlap of such products is an opportunity for future systematic reuse to reduce software development and maintenance costs. Therefore, we have tailored existing domain analysis methods to our organization to identify commonalities and variabilities among such products and to assess the potential for software product line (SPL) approaches. As an exploratory case study, we report on our experiences and lessons learned from conducting the domain analysis in four application cases with large-scale software products. We learned that the outcome of a domain analysis was often a smaller integration scenario instead of an SPL and that business case calculations were less relevant for the stakeholders and managers from the business units during this phase. We also learned that architecture reconstruction using a simple block diagram notation aids domain analysis and that large parts of our approach were reusable across application cases. © 2015, Springer Science+Business Media New York.},
  comment       = {38},
  document_type = {Article},
  doi           = {10.1007/s10664-014-9358-0},
  review        = {CE PM JOUR},
  source        = {Scopus},
  url           = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84922424792&doi=10.1007%2fs10664-014-9358-0&partnerID=40&md5=d52527a44c67d5bcbcaab488aa82cc99},
}

@Article{Cetina2013a,
  author        = {Carlos Cetina and Pau Giner and Joan Fons and Vicente Pelechano},
  title         = {Prototyping Dynamic Software Product Lines to evaluate run-time reconfigurations},
  journal       = {Science of Computer Programming},
  year          = {2013},
  volume        = {78},
  number        = {12},
  pages         = {2399 - 2413},
  issn          = {0167-6423},
  note          = {Special Section on International Software Product Line Conference 2010 and Fundamentals of Software Engineering (selected papers of FSEN 2011)},
  __markedentry = {[mac:]},
  abstract      = {Dynamic Software Product Lines (DSPL) encompass systems that are capable of modifying their own behavior with respect to changes in their operating environment by using run-time reconfigurations. A failure in these reconfigurations can directly impact the user experience since the reconfigurations are performed when the system is already under the users control. In this work, we prototype a Smart Hotel DSPL to evaluate the reliability-based risk of the DSPL reconfigurations, specifically, the probability of malfunctioning (Availability) and the consequences of malfunctioning (Severity). This DSPL prototype was performed with the participation of human subjects by means of a Smart Hotel case study which was deployed with real devices. Moreover, we successfully identified and addressed two challenges associated with the involvement of human subjects in DSPL prototyping: enabling participants to (1) trigger the run-time reconfigurations and to (2) understand the effects of the reconfigurations. The evaluation of the case study reveals positive results regarding both Availability and Severity. However, the participant feedback highlights issues with recovering from a failed reconfiguration or a reconfiguration triggered by mistake. To address these issues, we discuss some guidelines learned in the case study. Finally, although the results achieved by the DSPL may be considered satisfactory for its particular domain, DSPL engineers must provide users with more control over the reconfigurations or the users will not be comfortable with DSPLs.},
  comment       = {15},
  doi           = {https://doi.org/10.1016/j.scico.2012.06.007},
  keywords      = {Dynamic Software Product Line, Variability modeling, Smart Hotel},
  review        = {EXP DD AD JOUR},
  url           = {http://www.sciencedirect.com/science/article/pii/S0167642312001189},
}

@Article{Sinnema2008,
  author        = {Marco Sinnema and Sybren Deelstra},
  title         = {Industrial validation of COVAMOF},
  journal       = {Journal of Systems and Software},
  year          = {2008},
  volume        = {81},
  number        = {4},
  pages         = {584 - 600},
  issn          = {0164-1212},
  note          = {Selected papers from the 10th Conference on Software Maintenance and Reengineering (CSMR 2006)},
  __markedentry = {[mac:]},
  abstract      = {COVAMOF is a variability management framework for product families that was developed to reduce the number of iterations required during product derivation and to reduce the dependency on experts. In this paper, we present the results of an experiment with COVAMOF in industry. The results show that with COVAMOF, engineers that are not involved in the product family were now capable of deriving the products in 100% of the cases, compared to 29% of the cases without COVAMOF. For experts, the use of COVAMOF reduced the number of iterations by 42%, and the total derivation time by 38%.},
  comment       = {17 Deelstra},
  doi           = {https://doi.org/10.1016/j.jss.2007.06.002},
  keywords      = {Product family engineering, Industrial validation, Software Variability Management},
  review        = {EXP PM DRQ DD EE DT ARQ AD FE AT JOUR},
  url           = {http://www.sciencedirect.com/science/article/pii/S0164121207001422},
}

@Article{Thurimella2013a,
  author        = {Anil Kumar Thurimella and Bernd Brügge},
  title         = {A mixed-method approach for the empirical evaluation of the issue-based variability modeling},
  journal       = {Journal of Systems and Software},
  year          = {2013},
  volume        = {86},
  number        = {7},
  pages         = {1831 - 1849},
  issn          = {0164-1212},
  __markedentry = {[mac:]},
  abstract      = {Background
Variability management is the fundamental part of software product line engineering, which deals with customization and reuse of artifacts for developing a family of systems. Rationale approaches structure decision-making by managing the tacit-knowledge behind decisions. This paper reports a quasi-experiment for evaluating a rationale enriched collaborative variability management methodology called issue-based variability modeling.
Objective
We studied the interaction of stakeholders with issue-based modeling to evaluate its applicability in requirements engineering teams. Furthermore, we evaluated the reuse of rationale while instantiating and changing variability.
Approach
We enriched a quasi-experimental design with a variety of methods found in case study research. A sample of 258 students was employed with data collection and analysis based on a mix of qualitative and quantitative methods. Our study was performed in two phases: the first phase focused on variability identification and instantiation, while the second phase included tasks on variability evolution.
Results
We obtained strong empirical evidence on reuse patterns for rationale during instantiation and evolution of variability. The tabular representations used by rationale modeling are learnable and usable in teams of diverse backgrounds.},
  comment       = {19},
  doi           = {https://doi.org/10.1016/j.jss.2013.01.038},
  keywords      = {Rationale management, Software product lines, Variability, Requirements engineering, Empirical software engineering, Mixed-methods},
  review        = {QUASI DRQ JOUR},
  url           = {http://www.sciencedirect.com/science/article/pii/S0164121213000186},
}

@Article{Liu2017,
  author        = {Yuzhou Liu and Lei Liu and Huaxiao Liu and Xiaoyu Wang and Hongji Yang},
  title         = {Mining domain knowledge from app descriptions},
  journal       = {Journal of Systems and Software},
  year          = {2017},
  volume        = {133},
  pages         = {126 - 144},
  issn          = {0164-1212},
  __markedentry = {[mac:]},
  abstract      = {Domain analysis aims at gaining knowledge to a particular domain in the early stage of software development. A key challenge in domain analysis is to extract features automatically from related product artifacts. Compared with other kinds of artifacts, high volume of descriptions can be collected from App marketplaces (such as Google Play and Apple Store) easily when developing a new mobile application (App), so it is essential for the success of domain analysis to gain features and relationships from them using data analysis techniques. In this paper, we propose an approach to mine domain knowledge from App descriptions automatically, where the information of features in a single App description is firstly extracted and formally described by a Concern-based Description Model (CDM), which is based on predefined rules of feature extraction and a modified topic modeling method; then the overall knowledge in the domain is identified by classifying, clustering and merging the knowledge in the set of CDMs and topics, and the results are formalized by a Data-based Raw Domain Model (DRDM). Furthermore, we propose a quantified evaluation method for prioritizing the knowledge in DRDM. The proposed approach is validated by a series of experiments.},
  comment       = {19},
  doi           = {https://doi.org/10.1016/j.jss.2017.08.024},
  keywords      = {Domain analysis, Feature extraction, App descriptions, Data analysis},
  review        = {EXP PM JOUR},
  url           = {http://www.sciencedirect.com/science/article/pii/S0164121217301784},
}

@Article{Gonzalez-Huerta2015,
  author        = {Javier Gonzalez-Huerta and Emilio Insfran and Silvia Abrahão and Giuseppe Scanniello},
  title         = {Validating a model-driven software architecture evaluation and improvement method: A family of experiments},
  journal       = {Information and Software Technology},
  year          = {2015},
  volume        = {57},
  pages         = {405 - 429},
  issn          = {0950-5849},
  __markedentry = {[mac:]},
  abstract      = {Context
Software architectures should be evaluated during the early stages of software development in order to verify whether the non-functional requirements (NFRs) of the product can be fulfilled. This activity is even more crucial in software product line (SPL) development, since it is also necessary to identify whether the NFRs of a particular product can be achieved by exercising the variation mechanisms provided by the product line architecture or whether additional transformations are required. These issues have motivated us to propose QuaDAI, a method for the derivation, evaluation and improvement of software architectures in model-driven SPL development.
Objective
We present in this paper the results of a family of four experiments carried out to empirically validate the evaluation and improvement strategy of QuaDAI.
Method
The family of experiments was carried out by 92 participants: Computer Science Master’s and undergraduate students from Spain and Italy. The goal was to compare the effectiveness, efficiency, perceived ease of use, perceived usefulness and intention to use with regard to participants using the evaluation and improvement strategy of QuaDAI as opposed to the Architecture Tradeoff Analysis Method (ATAM).
Results
The main result was that the participants produced their best results when applying QuaDAI, signifying that the participants obtained architectures with better values for the NFRs faster, and that they found the method easier to use, more useful and more likely to be used. The results of the meta-analysis carried out to aggregate the results obtained in the individual experiments also confirmed these results.
Conclusions
The results support the hypothesis that QuaDAI would achieve better results than ATAM in the experiments and that QuaDAI can be considered as a promising approach with which to perform architectural evaluations that occur after the product architecture derivation in model-driven SPL development processes when carried out by novice software evaluators.},
  comment       = {25},
  doi           = {https://doi.org/10.1016/j.infsof.2014.05.018},
  keywords      = {Software architectures, Software architecture evaluation methods, Quality attributes, ATAM, Family of experiments, Meta-analysis},
  review        = {EXP DD AD JOUR},
  url           = {http://www.sciencedirect.com/science/article/pii/S0950584914001359},
}

@Article{Guana2013a,
  author        = {Victor Guana and Dario Correal},
  title         = {Improving software product line configuration: A quality attribute-driven approach},
  journal       = {Information and Software Technology},
  year          = {2013},
  volume        = {55},
  number        = {3},
  pages         = {541 - 562},
  issn          = {0950-5849},
  note          = {Special Issue on Software Reuse and Product Lines},
  __markedentry = {[mac:]},
  abstract      = {Context
During the definition of software product lines (SPLs) it is necessary to choose the components that appropriately fulfil a product’s intended functionalities, including its quality requirements (i.e., security, performance, scalability). The selection of the appropriate set of assets from many possible combinations is usually done manually, turning this process into a complex, time-consuming, and error-prone task.
Objective
Our main objective is to determine whether, with the use of modeling tools, we can simplify and automate the definition process of a SPL, improving the selection process of reusable assets.
Method
We developed a model-driven strategy based on the identification of critical points (sensitivity points) inside the SPL architecture. This strategy automatically selects the components that appropriately match the product’s functional and quality requirements. We validated our approach experimenting with different real configuration and derivation scenarios in a mobile healthcare SPL where we have worked during the last three years.
Results
Through our SPL experiment, we established that our approach improved in nearly 98% the selection of reusable assets when compared with the unassisted analysis selection. However, using our approach there is an increment in the time required for the configuration corresponding to the learning curve of the proposed tools.
Conclusion
We can conclude that our domain-specific modeling approach significantly improves the software architect’s decision making when selecting the most suitable combinations of reusable components in the context of a SPL.},
  comment       = {22},
  doi           = {https://doi.org/10.1016/j.infsof.2012.09.007},
  keywords      = {Software architecture, Model driven – software product lines, Variability management, Quality evaluation, Sensitivity points, Domain specific modeling},
  review        = {EXP DRQ DD EE JOUR},
  url           = {http://www.sciencedirect.com/science/article/pii/S0950584912002017},
}

@Article{Saeed2016a,
  author        = {Mazin Saeed and Faisal Saleh and Sadiq Al-Insaif and Mohamed El-Attar},
  title         = {Empirical validating the cognitive effectiveness of a new feature diagrams visual syntax},
  journal       = {Information and Software Technology},
  year          = {2016},
  volume        = {71},
  pages         = {1 - 26},
  issn          = {0950-5849},
  __markedentry = {[mac:]},
  abstract      = {Context
Feature models are commonly used to capture and communicate the commonality and variability of features in a Software Product Line. The core component of Feature models is feature diagrams, which graphically depict features in a hierarchical form. In previous work we have proposed a new notation that aims to improve the cognitive effectiveness of feature diagrams.
Objective
The objective of this paper is to empirically validate the cognitive effectiveness of the new feature diagrams notation in comparison to its original form.
Methods
We use two distinct empirical user-studies to validate the new notation. The first empirical study uses the survey approach while the second study is a subject-based experiment. The survey study investigates the semantic transparency of the new notation while the second study investigates the speed and accuracy of reading the notation.
Results
The results of the studies indicate that the proposed changes have significantly improved its cognitive effectiveness.
Conclusions
The cognitive effectiveness of feature diagrams has been improved, however there remains further research for full acceptance of the new notation by its potential user community.},
  comment       = {26},
  doi           = {https://doi.org/10.1016/j.infsof.2015.10.012},
  keywords      = {Feature models, Visual syntax evaluation, Software product lines},
  review        = {EXP DRQ JOUR},
  url           = {http://www.sciencedirect.com/science/article/pii/S0950584915001780},
}

@Article{Reinhartz-Berger2017,
  author        = {Iris Reinhartz-Berger and Kathrin Figl and Øystein Haugen},
  title         = {Investigating styles in variability modeling: Hierarchical vs. constrained styles},
  journal       = {Information and Software Technology},
  year          = {2017},
  volume        = {87},
  pages         = {81 - 102},
  issn          = {0950-5849},
  __markedentry = {[mac:]},
  abstract      = {Context
A common way to represent product lines is with variability modeling. Yet, there are different ways to extract and organize relevant characteristics of variability. Comprehensibility of these models and the ease of creating models are important for the efficiency of any variability management approach.
Objective
The goal of this paper is to investigate the comprehensibility of two common styles to organize variability into models – hierarchical and constrained – where the dependencies between choices are specified either through the hierarchy of the model or as cross-cutting constraints, respectively.
Method
We conducted a controlled experiment with a sample of 90 participants who were students with prior training in modeling. Each participant was provided with two variability models specified in Common Variability Language (CVL) and was asked to answer questions requiring interpretation of provided models. The models included 9–20 nodes and 8–19 edges and used the main variability elements. After answering the questions, the participants were asked to create a model based on a textual description.
Results
The results indicate that the hierarchical modeling style was easier to comprehend from a subjective point of view, but there was also a significant interaction effect with the degree of dependency in the models, that influenced objective comprehension. With respect to model creation, we found that the use of a constrained modeling style resulted in higher correctness of variability models.
Conclusions
Prior exposure to modeling style and the degree of dependency among elements in the model determine what modeling style a participant chose when creating the model from natural language descriptions. Participants tended to choose a hierarchical style for modeling situations with high dependency and a constrained style for situations with low dependency. Furthermore, the degree of dependency also influences the comprehension of the variability model.},
  comment       = {22},
  doi           = {https://doi.org/10.1016/j.infsof.2017.01.012},
  keywords      = {Variability modeling, Feature modeling, Comprehensibility, Hierarchical modeling, Textual constraints, Cognitive aspects, Empirical research, Product line engineering},
  review        = {EXP DRQ JOUR},
  url           = {http://www.sciencedirect.com/science/article/pii/S0950584917300800},
}

@Article{Dermeval2015a,
  author        = {Diego Dermeval and Thyago Tenório and Ig Ibert Bittencourt and Alan Silva and Seiji Isotani and Márcio Ribeiro},
  title         = {Ontology-based feature modeling: An empirical study in changing scenarios},
  journal       = {Expert Systems with Applications},
  year          = {2015},
  volume        = {42},
  number        = {11},
  pages         = {4950 - 4964},
  issn          = {0957-4174},
  __markedentry = {[mac:]},
  abstract      = {A software product line (SPL) is a set of software systems that have a particular set of common features and that satisfy the needs of a particular market segment or mission. Feature modeling is one of the key activities involved in the design of SPLs. The feature diagram produced in this activity captures the commonalities and variabilities of SPLs. In some complex domains (e.g., ubiquitous computing, autonomic systems and context-aware computing), it is difficult to foresee all functionalities and variabilities a specific SPL may require. Thus, Dynamic Software Product Lines (DSPLs) bind variation points at runtime to adapt to fluctuations in user needs as well as to adapt to changes in the environment. In this context, relying on formal representations of feature models is important to allow them to be automatically analyzed during system execution. Among the mechanisms used for representing and analyzing feature models, description logic (DL) based approaches demand to be better investigated in DSPLs since it provides capabilities, such as automated inconsistency detection, reasoning efficiency, scalability and expressivity. Ontology is the most common way to represent feature models knowledge based on DL reasoners. Previous works conceived ontologies for feature modeling either based on OWL classes and properties or based on OWL individuals. However, considering change or evolution scenarios of feature models, we need to compare whether a class-based or an individual-based feature modeling style is recommended to describe feature models to support SPLs, and especially its capabilities to deal with changes in feature models, as required by DSPLs. In this paper, we conduct a controlled experiment to empirically compare two approaches based on each one of these modeling styles in several changing scenarios (e.g., add/remove mandatory feature, add/remove optional feature and so on). We measure time to perform changes, structural impact of changes (flexibility) and correctness for performing changes in our experiment. Our results indicate that using OWL individuals requires less time to change and is more flexible than using OWL classes and properties. These results provide insightful assumptions towards the definition of an approach relying on reasoning capabilities of ontologies that can effectively support products reconfiguration in the context of DSPL.},
  comment       = {15},
  doi           = {https://doi.org/10.1016/j.eswa.2015.02.020},
  keywords      = {Feature modeling, Ontology, Software product line, Empirical software engineering},
  review        = {EXP DRQ JOUR},
  url           = {http://www.sciencedirect.com/science/article/pii/S0957417415001190},
}

@Article{Wang2013a,
  author        = {Wang, Y. and Kobsa, A.},
  title         = {A PLA-based privacy-enhancing user modeling framework and its evaluation},
  journal       = {User Modeling and User-Adapted Interaction},
  year          = {2013},
  volume        = {23},
  number        = {1},
  pages         = {41-82},
  note          = {cited By 6},
  __markedentry = {[mac:]},
  abstract      = {Reconciling personalization with privacy has been a continuing interest in user modeling research. This aim has computational, legal and behavioral/attitudinal ramifications. We present a dynamic privacy-enhancing user modeling framework that supports compliance with users' individual privacy preferences and with the privacy laws and regulations that apply to each user. The framework is based on a software product line architecture. It dynamically selects personalization methods during runtime that meet the current privacy constraints. Since dynamic architectural reconfiguration is typically resource-intensive, we conducted a performance evaluation with four implementations of our system that vary two factors. The results demonstrate that at least one implementation of our approach is technically feasible with comparatively modest additional resources, even for websites with the highest traffic today. To gauge user reactions to privacy controls that our framework enables, we also conducted a controlled experiment that allowed one group of users to specify privacy preferences and view the resulting effects on employed personalization methods. We found that users in this treatment group utilized this feature, deemed it useful, and had fewer privacy concerns as measured by higher disclosure of their personal data. © 2012 Springer Science+Business Media B.V.},
  comment       = {42},
  document_type = {Article},
  doi           = {10.1007/s11257-011-9114-8},
  review        = {EXP DD EE AD FE JOUR},
  source        = {Scopus},
  url           = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84872381970&doi=10.1007%2fs11257-011-9114-8&partnerID=40&md5=1a3a96d04f816a8a746cd93b932acbf8},
}

@Article{Bagheri2011a,
  author        = {Bagheri, E. and Gasevic, D.},
  title         = {Assessing the maintainability of software product line feature models using structural metrics},
  journal       = {Software Quality Journal},
  year          = {2011},
  volume        = {19},
  number        = {3},
  pages         = {579-612},
  note          = {cited By 73},
  __markedentry = {[mac:]},
  abstract      = {A software product line is a unified representation of a set of conceptually similar software systems that share many common features and satisfy the requirements of a particular domain. Within the context of software product lines, feature models are tree-like structures that are widely used for modeling and representing the inherent commonality and variability of software product lines. Given the fact that many different software systems can be spawned from a single software product line, it can be anticipated that a low-quality design can ripple through to many spawned software systems. Therefore, the need for early indicators of external quality attributes is recognized in order to avoid the implications of defective and low-quality design during the late stages of production. In this paper, we propose a set of structural metrics for software product line feature models and theoretically validate them using valid measurement-theoretic principles. Further, we investigate through controlled experimentation whether these structural metrics can be good predictors (early indicators) of the three main subcharacteristics of maintainability: analyzability, changeability, and understandability. More specifically, a four-step analysis is conducted: (1) investigating whether feature model structural metrics are correlated with feature model maintainability through the employment of classical statistical correlation techniques; (2) understanding how well each of the structural metrics can serve as discriminatory references for maintainability; (3) identifying the sufficient set of structural metrics for evaluating each of the subcharacteristics of maintainability; and (4) evaluating how well different prediction models based on the proposed structural metrics can perform in indicating the maintainability of a feature model. Results obtained from the controlled experiment support the idea that useful prediction models can be built for the purpose of evaluating feature model maintainability using early structural metrics. Some of the structural metrics show significant correlation with the subjective perception of the subjects about the maintainability of the feature models. © 2010 Springer Science+Business Media, LLC.},
  comment       = {34},
  document_type = {Article},
  doi           = {10.1007/s11219-010-9127-2},
  review        = {EXP DRQ ARQ JOUR},
  source        = {Scopus},
  url           = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-79958248566&doi=10.1007%2fs11219-010-9127-2&partnerID=40&md5=e0e2572c8e9a517f7df77ecfd32da223},
}

@Article{Bonifacio2017,
  author        = {Bonifácio, R. and Borba, P. and Ferraz, C. and Accioly, P.},
  title         = {Empirical assessment of two approaches for specifying software product line use case scenarios},
  journal       = {Software and Systems Modeling},
  year          = {2017},
  volume        = {16},
  number        = {1},
  pages         = {97-123},
  note          = {cited By 0},
  __markedentry = {[mac:]},
  abstract      = {Modularity benefits, including the independent maintenance and comprehension of individual modules, have been widely advocated. However, empirical assessments to investigate those benefits have mostly focused on source code, and thus, the relevance of modularity to earlier artifacts is still not so clear (such as requirements and design models). In this paper, we use a multimethod technique, including designed experiments, to empirically evaluate the benefits of modularity in the context of two approaches for specifying product line use case scenarios: PLUSS and MSVCM. The first uses an annotative approach for specifying variability, whereas the second relies on aspect-oriented constructs for separating common and variant scenario specifications. After evaluating these approaches through the specifications of several systems, we find out that MSVCM reduces feature scattering and improves scenario cohesion. These results suggest that evolving a product line specification using MSVCM requires only localized changes. On the other hand, the results of six experiments reveal that MSVCM requires more time to derive the product line specifications and, contrasting with the modularity results, reduces the time to evolve a product line specification only when the subjects have been well trained and are used to the task of evolving product line specifications. © 2015, Springer-Verlag Berlin Heidelberg.},
  comment       = {27},
  document_type = {Article},
  doi           = {10.1007/s10270-015-0471-3},
  review        = {EXP DRQ JOUR},
  source        = {Scopus},
  url           = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84929900234&doi=10.1007%2fs10270-015-0471-3&partnerID=40&md5=f2635739cdc8744117607019ed6aa88a},
}

@Article{Accioly2014,
  author        = {Accioly, P. and Borba, P. and Bonifácio, R.},
  title         = {Controlled experiments comparing black-box testing strategies for software product lines},
  journal       = {Journal of Universal Computer Science},
  year          = {2014},
  volume        = {20},
  number        = {5},
  pages         = {615-639},
  note          = {cited By 1},
  __markedentry = {[mac:]},
  abstract      = {SPL testing has been considered a challenging task, mainly due to the diversity of products that might be generated from an SPL. To deal with this problem, techniques for specifying and deriving product specific functional test cases have been proposed. However, there is little empirical evidence of the benefits and drawbacks of these techniques. To provide this kind of evidence, in a previous work we conducted an empirical study that compared two design techniques for black-box manual testing, a generic technique that we have observed in an industrial test execution environment, and a product specific technique whose functional test cases could be derived using any SPL approach that considers variations in functional tests. Besides revisiting the first study, here we present a second study that reinforce our findings and brings new insights to our investigation. Both studies indicate that specific test cases improve test execution productivity and quality. © J.UCS.},
  comment       = {25},
  document_type = {Article},
  review        = {EXP DT AT JOUR},
  source        = {Scopus},
  url           = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84904764309&partnerID=40&md5=112aba25b5f4f038fd0f7ce17b051afe},
}

@Article{Ahmed2008d,
  author        = {Ahmed, F. and Capretz, L.F.},
  title         = {The software product line architecture: An empirical investigation of key process activities},
  journal       = {Information and Software Technology},
  year          = {2008},
  volume        = {50},
  number        = {11},
  pages         = {1098-1113},
  note          = {cited By 20},
  __markedentry = {[mac:]},
  abstract      = {Software architecture has been a key area of concern in software industry due to its profound impact on the productivity and quality of software products. This is even more crucial in case of software product line, because it deals with the development of a line of products sharing common architecture and having controlled variability. The main contributions of this paper is to increase the understanding of the influence of key software product line architecture process activities on the overall performance of software product line by conducting a comprehensive empirical investigation covering a broad range of organizations currently involved in the business of software product lines. This is the first study to empirically investigate and demonstrate the relationships between some of the software product line architecture process activities and the overall software product line performance of an organization at the best of our knowledge. The results of this investigation provide empirical evidence that software product line architecture process activities play a significant role in successfully developing and managing a software product line. © 2007 Elsevier B.V. All rights reserved.},
  comment       = {16},
  document_type = {Article},
  doi           = {10.1016/j.infsof.2007.10.013},
  review        = {EXP DD AD JOUR},
  source        = {Scopus},
  url           = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-49549123847&doi=10.1016%2fj.infsof.2007.10.013&partnerID=40&md5=63a5afabfc5f33af279aa8e53b82a03c},
}

@Article{Feigenspan2012a,
  author        = {Feigenspan, J. and Schulze, M. and Papendieck, M. and Kästner, C. and Dachselt, R. and Köppen, V. and Frisch, M. and Saake, G.},
  title         = {Supporting program comprehension in large preprocessor-based software product lines},
  journal       = {IET Software},
  year          = {2012},
  volume        = {6},
  number        = {6},
  pages         = {488-501},
  note          = {cited By 5},
  __markedentry = {[mac:]},
  abstract      = {Software product line (SPL) engineering provides an effective mechanism to implement variable software. However, using preprocessors to realise variability, which is typical in industry, is heavily criticised, because it often leads to obfuscated code. Using background colours to highlight code annotated with preprocessor statements to support comprehensibility has proved to be effective, however, scalability to large SPLs is questionable. The authors' aim is to implement and evaluate scalable usage of background colours for industrial-sized SPLs. They designed and implemented scalable concepts in a tool called FeatureCommander. To evaluate its effectiveness, the authors conducted a controlled experiment with a large real-world SPL with over 99 000 lines of code and 340 features. They used a within-subjects design with treatment colours and no colours. They compared correctness and response time of tasks for both treatments. For certain kinds of tasks, background colours improve program comprehension. Furthermore, the subjects generally favour background colours compared with no background colours. In addition, the subjects who worked with background colours had to use the search functions less frequently. The authors show that background colours can improve program comprehension in large SPLs. Based on these encouraging results, they continue their work on improving program comprehension in large SPLs. © 2012 The Institution of Engineering and Technology.},
  comment       = {14},
  document_type = {Article},
  doi           = {10.1049/iet-sen.2011.0172},
  review        = {EXP DRQ JOUR},
  source        = {Scopus},
  url           = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84870419356&doi=10.1049%2fiet-sen.2011.0172&partnerID=40&md5=4b531e8f5d4a9751fbc0361641fbb8d4},
}

@Article{Asadi2016,
  author        = {Asadi, M. and Soltani, S. and Gašević, D. and Hatala, M.},
  title         = {The effects of visualization and interaction techniques on feature model configuration},
  journal       = {Empirical Software Engineering},
  year          = {2016},
  volume        = {21},
  number        = {4},
  pages         = {1706-1743},
  note          = {cited By 2},
  __markedentry = {[mac:]},
  abstract      = {A Software Product Line is a set of software systems of a domain, which share some common features but also have significant variability. A feature model is a variability modeling artifact which represents differences among software products with respect to variability relationships among their features. Having a feature model along with a reference model developed in the domain engineering lifecycle, a concrete product of the family is derived by selecting features in the feature model (referred to as the configuration process) and by instantiating the reference model. However, feature model configuration can be a cumbersome task because: 1) feature models may consist of a large number of features, which are hard to comprehend and maintain; and 2) many factors including technical limitations, implementation costs, stakeholders’ requirements and expectations must be considered in the configuration process. Recognizing these issues, a significant amount of research efforts has been dedicated to different aspects of feature model configuration such as automating the configuration process. Several approaches have been proposed to alleviate the feature model configuration challenges through applying visualization and interaction techniques. However, there have been limited empirical insights available into the impact of visualization and interaction techniques on the feature model configuration process. In this paper, we present a set of visualization and interaction interventions for representing and configuring feature models, which are then empirically validated to measure the impact of the proposed interventions. An empirical study was conducted by following the principles of control experiments in software engineering and by applying the well-known software quality standard ISO 9126 to operationalize the variables investigated in the experiment. The results of the empirical study revealed that the employed visualization and interaction interventions significantly improved completion time of comprehension and changing of the feature model configuration. Additionally, according to results, the proposed interventions are easy-to-use and easy-to-learn for the participants. © 2015, Springer Science+Business Media New York.},
  comment       = {38},
  document_type = {Article},
  doi           = {10.1007/s10664-014-9353-5},
  review        = {EXP DRQ JOUR},
  source        = {Scopus},
  url           = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84925275030&doi=10.1007%2fs10664-014-9353-5&partnerID=40&md5=985f277899e4fd1ea4af6e2b70d33f32},
}

@Article{Reinhartz-Berger2014,
  author        = {Reinhartz-Berger, I. and Sturm, A.},
  title         = {Comprehensibility of UML-based software product line specifications A controlled experiment},
  journal       = {Empirical Software Engineering},
  year          = {2014},
  volume        = {19},
  number        = {3},
  pages         = {678-713},
  note          = {cited By 6},
  __markedentry = {[mac:]},
  abstract      = {Software Product Line Engineering (SPLE) deals with developing artifacts that capture the common and variable aspects of software product families. Domain models are one kind of such artifacts. Being developed in early stages, domain models need to specify commonality and variability and guide the reuse of the artifacts in particular software products. Although different modeling methods have been proposed to manage and support these activities, the assessment of these methods is still in an inceptive stage. In this work, we examined the comprehensibility of domain models specified in ADOM, a UML-based SPLE method. In particular, we conducted a controlled experiment in which 116 undergraduate students were required to answer comprehension questions regarding a domain model that was equipped with explicit reuse guidance and/or variability specification. We found that explicit specification of reuse guidance within the domain model helped understand the model, whereas explicit specification of variability increased comprehensibility only to a limited extent. Explicit specification of both reuse guidance and variability often provided intermediate results, namely, results that were better than specification of variability without reuse guidance, but worse than specification of reuse guidance without variability. All these results were perceived in different UML diagram types, namely, use case, class, and sequence diagrams and for different commonality-, variability-, and reuse-related aspects. © 2012 Springer Science+Business Media, LLC.},
  comment       = {36},
  document_type = {Article},
  doi           = {10.1007/s10664-012-9234-8},
  review        = {EXP DRQ DD JOUR},
  source        = {Scopus},
  url           = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84899943828&doi=10.1007%2fs10664-012-9234-8&partnerID=40&md5=8c6715fe527f714fb9a98aa9dd230798},
}

@Article{Feigenspan2013,
  author        = {Feigenspan, J. and Kästner, C. and Apel, S. and Liebig, J. and Schulze, M. and Dachselt, R. and Papendieck, M. and Leich, T. and Saake, G.},
  title         = {Do background colors improve program comprehension in the #ifdef hell?},
  journal       = {Empirical Software Engineering},
  year          = {2013},
  volume        = {18},
  number        = {4},
  pages         = {699-745},
  note          = {cited By 35},
  __markedentry = {[mac:]},
  abstract      = {Software-product-line engineering aims at the development of variable and reusable software systems. In practice, software product lines are often implemented with preprocessors. Preprocessor directives are easy to use, and many mature tools are available for practitioners. However, preprocessor directives have been heavily criticized in academia and even referred to as "#ifdef hell", because they introduce threats to program comprehension and correctness. There are many voices that suggest to use other implementation techniques instead, but these voices ignore the fact that a transition from preprocessors to other languages and tools is tedious, erroneous, and expensive in practice. Instead, we and others propose to increase the readability of preprocessor directives by using background colors to highlight source code annotated with ifdef directives. In three controlled experiments with over 70 subjects in total, we evaluate whether and how background colors improve program comprehension in preprocessor-based implementations. Our results demonstrate that background colors have the potential to improve program comprehension, independently of size and programming language of the underlying product. Additionally, we found that subjects generally favor background colors. We integrate these and other findings in a tool called FeatureCommander, which facilitates program comprehension in practice and which can serve as a basis for further research. © 2012 Springer Science+Business Media, LLC.},
  comment       = {47},
  document_type = {Article},
  doi           = {10.1007/s10664-012-9208-x},
  review        = {EXP EE JOUR},
  source        = {Scopus},
  url           = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84879846095&doi=10.1007%2fs10664-012-9208-x&partnerID=40&md5=76165de9ec8580474e8390c79a7ad728},
}

@InProceedings{Denger2006,
  author    = {Denger, Christian and Kolb, Ronny},
  title     = {{Testing and Inspecting Reusable Product Line Components: First Empirical Results}},
  booktitle = {International Symposium on Empirical Software Engineering and Measurement},
  year      = {2006},
  abstract  = {In recent years, product line development has increasingly received attention in industry as it enables software-developing organizations to reduce both cost and time of developing and maintaining increasingly complex systems as well as to address the demands for individually customized products. Successful product line development requires high quality of reusable artifacts in order to achieve the promised benefits. The unique issues of quality assurance in the context of systematic reuse, however, have not been quantitatively investigated so far. This paper describes a first empirical study comparing the two defect detection techniques, code inspections and functional testing, in the context of product line development. The primary goal of the study was to initially investigate the defect finding potential of the techniques on reusable software components with common and variant features. The major findings of the study are that the two techniques identified different types of defects on variants of a reusable component. Inspections are on average 66.39% more effective and need on average 36.84% less effort to detect a defect We found that both the testing and inspection techniques applied in the experiment were ineffective in identifying variant-specific defects. Overall, the results indicate that the standard quality assurance techniques seem to be insufficient to address special characteristics of reusable components.},
  file      = {:C\:/Users/HP/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Denger, Kolb - 2006 - Testing and Inspecting Reusable Product Line Components First Empirical Results.pdf:pdf},
  keywords  = {Controlled Experiment,D25 [Software Engineering]: Testing and Debugging-Code inspections and walk-throughs,Functional Testing,General Terms: Experimentation,Inspection,Measurement Keywords Software Product Line,Quality Assurance,Reusable Components},
  review    = {EXP FE AT CONG},
}

@InProceedings{Santos2016,
  author    = {Santos, Alcemir Rodrigues and {Do Carmo Machado}, Ivan and {De Almeida}, Eduardo Santana},
  title     = {{RiPLE-HC: JavaScript systems meets SPL composition}},
  booktitle = {International Software Product Line Conference},
  year      = {2016},
  volume    = {16-23-September-2016},
  pages     = {154--162},
  month     = {sep},
  publisher = {Association for Computing Machinery},
  abstract  = {Context. Software Product Lines (SPL) engineering is increasingly being applied to handle variability in industrial software systems. Problem. The research community has pointed out a series of benefits which modularity brings to software composition, a key aspect in SPL engineering. However, in practice, the reuse in Javascript-based systems relies on the use of package managers (e.g., npm, jam, bower, requireJS), but these approaches do not allow the management of project features. Method. This paper presents the RiPLE-HC, a strategy aimed at blending compositional and annotative approaches to implement variability in Javascript- based systems. Results. We applied the approach in an industrial environment and conducted an academic case study with six open-source systems to evaluate its robustness and scalability. Additionally, we carried a controlled experiment to analyze the impact of the RiPLE-HC code organization on the feature location maintenance tasks. Conclusion. The empirical evaluations yielded evidence of reduced effort in feature location, and positive benefits when introducing systematic reuse aspects in Javascript-based systems.},
  doi       = {10.1145/2934466.2934486},
  file      = {:C\:/Users/HP/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Santos, Do Carmo Machado, De Almeida - 2016 - RiPLE-HC JavaScript systems meets SPL composition.pdf:pdf},
  isbn      = {9781450340502},
  keywords  = {Eclipse plugin,Feature Composition,FeatureIDE,Software Product Line Engineering,Web Systems Domain},
  review    = {EXP EE FE CONG},
}

@InProceedings{Stein2014,
  author    = {Stein, Jacob and Nunes, Ingrid and Cirilo, Elder},
  title     = {{Preference-based feature model configuration with multiple stakeholders}},
  booktitle = {International Software Product Line Conference},
  year      = {2014},
  volume    = {1},
  pages     = {132--141},
  month     = {sep},
  publisher = {Association for Computing Machinery},
  abstract  = {Feature model configuration is known to be a hard, errorprone and time-consuming activity. This activity gets even more complicated when it involves multiple stakeholders in the configuration process. Research work has proposed approaches to aid multi-stakeholder feature model configuration, but they rely on systematic processes that constraint decisions of some of the stakeholders. In this paper, we propose a novel approach to improve the multi-stakeholder configuration process, considering stakeholders' preferences expressed through both hard and soft constraints. Based on such preferences, we recommend different product configurations using different strategies from the social choice theory. We conducted an empirical study to evaluate the effectiveness of our strategies with respect to individual stakeholder satisfaction and fairness among all stakeholders. Results indicate that particular strategies perform best with respect to these aspects. Copyright is held by the owner/author(s).},
  doi       = {10.1145/2648511.2648525},
  file      = {:C\:/Users/HP/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Stein, Nunes, Cirilo - 2014 - Preference-based feature model configuration with multiple stakeholders.pdf:pdf},
  isbn      = {9781450327404},
  keywords  = {Feature model configuration,Preferences,Social choice},
  review    = {EXP DRQ DD CONG},
}

@InProceedings{Pereira2018,
  author    = {Pereira, Juliana Alves and Schulze, Sandro and Figueiredo, Eduardo and Saake, Gunter},
  title     = {{N-dimensional tensor factorization for self-configuration of software product lines at runtime}},
  booktitle = {International Software Product Line Conference},
  year      = {2018},
  volume    = {1},
  pages     = {87--97},
  month     = {aug},
  publisher = {Association for Computing Machinery},
  abstract  = {Dynamic software product lines demand self-adaptation of their behavior to deal with runtime contextual changes in their environment and offer a personalized product to the user. However, taking user preferences and context into account impedes the manual configuration process, and thus, an efficient and automated procedure is required. To automate the configuration process, context-aware recommendation techniques have been acknowledged as an effective mean to provide suggestions to a user based on their recognized context. In this work, we propose a collaborative filtering method based on tensor factorization that allows an integration of contextual data by modeling an N-dimensional tensor User-Feature-Context instead of the traditional two-dimensional User-Feature matrix. In the proposed approach, different types of non-functional properties are considered as additional contextual dimensions. Moreover, we show how to self-configure software product lines by applying our N-dimensional tensor factorization recommendation approach. We evaluate our approach by means of an empirical study using two datasets of configurations derived for medium-sized product lines. Our results reveal significant improvements in the predictive accuracy of the configuration over a state-of-the-art noncontextual matrix factorization approach. Moreover, it can scale up to a 7-dimensional tensor containing hundred of configurations in a couple of milliseconds.},
  doi       = {10.1145/3233027.3233039},
  file      = {:C\:/Users/HP/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Pereira et al. - 2018 - N-dimensional tensor factorization for self-configuration of software product lines at runtime.pdf:pdf},
  isbn      = {9781450363716},
  keywords  = {Recommender systems,Runtime decision-making,Self-configuration,Software product lines},
  review    = {EXP AD FE DD EE CONG},
}

@InProceedings{Vasilevskiy2016,
  author    = {Vasilevskiy, Anatoly and Chauvel, Franck and Haugen, {\O}ystein},
  title     = {{Toward robust product realisation in software product lines}},
  booktitle = {International Software Product Line Conference},
  year      = {2016},
  volume    = {16-23-September-2016},
  pages     = {184--193},
  month     = {sep},
  publisher = {Association for Computing Machinery},
  abstract  = {Product derivation is a building process of products from selected features in software product lines (SPLs). Realisation paves the way for automatic product derivation. A realisation defines a mapping between abstract features in a feature tree and their implementation artefacts in a model, and therefore governs the derivation of a new product. We experience that a realisation is not always straightforward and robust against modifications in the model. In the paper, we introduce an approach to build robust realisations. It consists of automated planning techniques and a layered architecture to yield a product. We demonstrate how our approach can leverage modern means of software design, development and validation. We evaluate the approach on a use-case provided by an industry partner and compare our technique to the existing realisation layer in the Base Variability Resolution (BVR) language.},
  doi       = {10.1145/2934466.2934484},
  file      = {:C\:/Users/HP/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Vasilevskiy, Chauvel, Haugen - 2016 - Toward robust product realisation in software product lines.pdf:pdf},
  isbn      = {9781450340502},
  keywords  = {Automated planning,Bvr,Fragment substitution,Model,Product derivation,Product line,Realisation,Variation point},
  review    = {EXP FE CONG},
}

@InProceedings{Martinez2015,
  author    = {Martinez, Jabier and Ziadi, Tewfik and Bissyand{\'{e}}, Tegawend{\'{e}} F. and Klein, Jacques and {Le Traon}, Yves},
  title     = {{Bottom-Up adoption of software product lines - A generic and extensible approach}},
  booktitle = {International Software Product Line Conference},
  year      = {2015},
  volume    = {20-24-July-2015},
  pages     = {101--110},
  month     = {jul},
  publisher = {Association for Computing Machinery},
  abstract  = {Although Software Product Lines are recurrently praised as an efficient paradigm for systematic reuse, practical adoption remains challenging. For bottom-up Software Product Line adoption, where a set of artefact variants already exists, practitioners lack end-to-end support for chaining (1) feature identification, (2) feature location, (3) feature constraints discovery, as well as (4) reengineering approaches. This challenge can be overcome if there exists a set of principles for building a framework to integrate various algorithms and to support different artefact types. In this paper, we propose the principles of such a framework and we provide insights on how it can be extended with adapters, algorithms and visualisations enabling their use in different scenarios. We describe its realization in BUT4Reuse (Bottom-Up Technologies for Reuse) and we assess its generic and extensible properties by implementing a variety of extensions. We further empirically assess the complexity of integration by reproducing case studies from the literature. Finally, we present an experiment where users realize a bottom-up Software Product Line adoption building on the case study of Eclipse variants.},
  doi       = {10.1145/2791060.2791086},
  file      = {:C\:/Users/HP/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Martinez et al. - 2015 - Bottom-Up adoption of software product lines - A generic and extensible approach.pdf:pdf},
  isbn      = {9781450336130},
  keywords  = {Mining existing assets,Reverse engineering,Software product line engineering},
  review    = {EXP EE AD FE CONG},
}

@InProceedings{Michalik2011,
  author    = {Michalik, Bartosz and Weyns, Danny and Bouck{\'{e}}, Nelis and Helleboogh, Alexander},
  title     = {{Supporting online updates of software product lines: A controlled experiment}},
  booktitle = {International Symposium on Empirical Software Engineering and Measurement},
  year      = {2011},
  pages     = {187--196},
  abstract  = {The evolution of Software Product Lines (SPL) is challenging because stakeholders have to deal with both regular evolution and the co-existence of different products. Our focus of product evolution is on the tasks integrators have to perform to update deployed SPL products with minimal interruption of services. In case of Egemin, our industrial partner, the updates of SPL products is further hampered as a consequence of outdated and imprecise architectural knowledge of deployed products. To facilitate the updates of products, we have developed the architecture-centric approach which comprises two complementary parts: an update viewpoint and a supporting tool. In this paper we present an evaluation of the architecturecentric approach. The approach is compared with the Egemin's current update approach in a controlled experiment. In the experiment 17 professionals were asked to perform 68 updates of logistic systems. The results obtained from the experiment show that the architecture-centric approach significantly improves the correctness of updates and reduces the interruption of services during updates of Egemin's SPL products. {\textcopyright} 2011 IEEE.},
  doi       = {10.1109/esem.2011.27},
  file      = {:C\:/Users/HP/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Michalik et al. - 2011 - Supporting online updates of software product lines A controlled experiment.pdf:pdf},
  issn      = {19493770},
  keywords  = {Experimentation,On-line updates,SPL,Software product line},
  review    = {EXP FE CONG},
}

@InProceedings{Thum2016,
  author    = {Th{\"{u}}m, Thomas and Ribeiro, M{\'{a}}rcio and Schr{\"{o}}ter, Reimar and Siegmund, Janet and Dalton, Francisco},
  title     = {{Product-line maintenance with emergent contract interfaces}},
  booktitle = {International Software Product Line Conference},
  year      = {2016},
  volume    = {16-23-September-2016},
  pages     = {134--143},
  month     = {sep},
  publisher = {Association for Computing Machinery},
  abstract  = {A software product line evolves whenever one of its products need to evolve. Maintenance of preprocessor-based product lines is a difficult task, as changes to the code base may unintentionally influence the behavior of uninvolved products. Hence, developers should be supported during maintenance. We present emergent contract interfaces to make productline development more efficient and less error-prone. The key idea is that for a given maintenance point (i.e., an assignment), we calculate (a) features in the source code that may be affected and (b) assertions based on contracts defined in the code base. By means of a controlled experiment, we provide empirical evidence regarding efficiency and erroravoidance with emergent contract interfaces.},
  doi       = {10.1145/2934466.2934471},
  file      = {:C\:/Users/HP/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Th{\"{u}}m et al. - 2016 - Product-line maintenance with emergent contract interfaces.pdf:pdf},
  isbn      = {9781450340502},
  keywords  = {Design by contract,Evolution,Maintenance,Preprocessor variability,Software product lines,Weakest precondition},
  review    = {EXP ARQ AD EE CONG},
}

@InProceedings{Reinhartz-Berger2014a,
  author    = {Reinhartz-Berger, Iris and Figl, Kathrin},
  title     = {{Comprehensibility of Orthogonal Variability modeling languages: The cases of CVL and OVM}},
  booktitle = {International Software Product Line Conference},
  year      = {2014},
  volume    = {1},
  pages     = {42--51},
  month     = {sep},
  publisher = {Association for Computing Machinery},
  abstract  = {As the complexity and variety of systems and software products have increased, the ability to manage their variability effectively and efficiently became crucial. To this end, variability can be specified either as an integral part of the development artifacts or in a separate orthogonal variability model. Lately, orthogonal variability models attract a lot of attention due to the fact that they do not require changing the complexity of the development artifacts and can be used in conjunction with different development artifacts. Despite this attention and to the best of our knowledge, no empirical study examined the comprehensibility of orthogonal variability models. In this work, we conducted an exploratory experiment to examine potential comprehension problems in two common orthogonal variability modeling languages, namely, Common Variability Language (CVL) and Orthogonal Variability Model (OVM). We examined the comprehensibility of the variability models and their relations to the development artifacts for novice users. To measure comprehensibility we used comprehension score (i.e., percentage of correct solution), time spent to complete tasks, and participants' perception of difficulty of different model constructs. The results showed high comprehensibility of the variability models, but low comprehensibility of the relations between the variability models and the development artifacts. Although the comprehensibility of CVL and OVM was similar in terms of comprehension score and time spent to complete tasks, novice users perceived OVM as more difficult to comprehend. Copyright 2014 ACM.},
  doi       = {10.1145/2648511.2648516},
  file      = {:C\:/Users/HP/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Reinhartz-Berger, Figl - 2014 - Comprehensibility of Orthogonal Variability modeling languages The cases of CVL and OVM.pdf:pdf},
  isbn      = {9781450327404},
  keywords  = {CVL,Empirical Study,Model Comprehension,OVM,Variability analysis},
  review    = {EXP DRQ DD CONG},
}

@InProceedings{Engineering,
  author    = {Engineering, ACM Special Interest Group on Software. and {ACM Digital Library.} and {Association for Computing Machinery.} and {Institute of Electrical and Electronics Engineers.}},
  title     = {{Evaluating Bug-Fixingin SoftwareProduct Lines: an Industrial Case Study}},
  booktitle = {International Symposium on Empirical Software Engineering and Measurement},
  year      = {2016},
  file      = {:C\:/Users/HP/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Engineering et al. - Unknown - EvaluatingBug-FixinginSoftwareProduct Lines an IndustrialCase Study.pdf:pdf},
  isbn      = {9781450344272},
  review    = {CE DT CONG},
}

@InProceedings{IEEEComputerSociety.TechnicalCouncilonSoftwareEngineering.2008,
  author    = {{IEEE Computer Society. Technical Council on Software Engineering.}},
  title     = {{Evolving Software Product Lines with Aspects: An Empirical Study on Design Stability}},
  booktitle = {International Conference on Software Engineering},
  year      = {2008},
  pages     = {882},
  publisher = {ACM},
  abstract  = {"ACM order number 529081."},
  file      = {:C\:/Users/HP/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/IEEE Computer Society. Technical Council on Software Engineering. - 2008 - Evolving Software Product Lines with Aspects An Empirical Stu.pdf:pdf},
  isbn      = {9781605580791},
  review    = {CE PM DRQ CONG},
}

@InProceedings{Thurimella2008,
  author    = {Thurimella, Anil Kumar and Bruegge, Bernd and Creighton, Oliver},
  title     = {{Identifying and exploiting the similarities between rationale management and variability management}},
  booktitle = {International Software Product Line Conference},
  year      = {2008},
  pages     = {99--108},
  publisher = {IEEE Computer Society},
  abstract  = {Modeling variability is a challenging issue in product line requirements engineering. Particular problems include, the instantiation of variations for individual products, the long-term evolution of the product line, and the support of collaboration between stakeholders. These problems are even more complicated when the product line organization is globally distributed. To address theses problems, this paper identifies four higher-level similarities between rationale management (which focus on knowledge management during software design) and variability management. Furthermore, exploiting the similarities, rationale management is combined with variability management to contribute issue-based variability modeling. Issue-based variability modeling was implemented and empirically evaluated based on a series of case studies with multi-case design. The results of the evaluation show that our approach improves the instantiation and evolution of variability, enables better informal collaboration between distributed stakeholders with different levels of modeling expertise and enhances the longevity of product lines. {\textcopyright} 2008 IEEE.},
  doi       = {10.1109/SPLC.2008.14},
  file      = {:C\:/Users/HP/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Thurimella, Bruegge, Creighton - 2008 - Identifying and exploiting the similarities between rationale management and variability managem.pdf:pdf},
  isbn      = {9780769533032},
  review    = {CE PM DRQ CONG},
}

@InProceedings{Almeida2012,
  author    = {de) Almeida, Eduardo (Eduardo Santana and {ACM Digital Library.}},
  title     = {{Identifying Improvement Potential in Evolving Product Line Infrastructures: 3 Case Studies}},
  booktitle = {International Software Product Line Conference},
  year      = {2012},
  publisher = {ACM},
  abstract  = {Title from content provider.},
  file      = {:C\:/Users/HP/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Almeida, ACM Digital Library. - 2012 - Identifying Improvement Potential in Evolving Product Line Infrastructures 3 Case Studies.pdf:pdf},
  isbn      = {9781450310949},
  review    = {CE PM DRQ DD EE CONG},
}

@InProceedings{Kishi,
  author    = {Kishi, Tomoji and Jarzabek, Stan and Gnesi, Stefania and {Association for Computing Machinery} and {ACM Digital Library.}},
  title     = {{Managing Cloned Variants: A Framework and Experience}},
  booktitle = {International Software Product Line Conference},
  year      = {2013},
  pages     = {286},
  file      = {:C\:/Users/HP/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Kishi et al. - Unknown - Managing Cloned Variants A Framework and Experience.pdf:pdf},
  isbn      = {9781450319683},
  review    = {CE PM DRQ DD EE DT CONG},
}

@InProceedings{Myllarniemi2013,
  author    = {Myll{\"{a}}rniemi, Varvana and Savolainen, Juha and M{\"{a}}nnist{\"{o}}, Tomi},
  title     = {{Performance variability in software product lines: A case study in the telecommunication domain}},
  booktitle = {International Software Product Line Conference},
  year      = {2013},
  pages     = {32--41},
  abstract  = {In the research on software product lines, product variants typically differ by their functionality, and quality attributes are more or less similar across products. To accumulate empirical evidence, this paper presents a descriptive case study of performance variability in a software product line of mobile network base stations. The goal is to study the motivation to vary performance, and the strategy for realizing performance variability in the product line architecture. The results highlight that the evolution of customer needs motivates performance variability; performance variability can be realized either with software or hardware variability strategy, with the latter often being prevailing; and the software strategy can be kept focused by downgrading performance. {\textcopyright} 2013 ACM.},
  doi       = {10.1145/2491627.2491631},
  file      = {:C\:/Users/HP/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Myll{\"{a}}rniemi, Savolainen, M{\"{a}}nnist{\"{o}} - 2013 - Performance variability in software product lines A case study in the telecommunication domai.pdf:pdf},
  isbn      = {9781450319683},
  keywords  = {architecture,case study,software product line,variability},
  review    = {CE PM DRQ DD ARQ AD CONG},
}

@InProceedings{Ganesan2006,
  author    = {Ganesan, Dharmalingam and Muthig, Dirk and Yoshimura, Kentaro and Europe, Hitachi},
  title     = {{Predicting Return-on-Investment for Product Line Generations}},
  booktitle = {International Software Product Line Conference},
  year      = {2006},
  abstract  = {The decision of an organization to introduce product line engineering depends on a sound and careful analysis of risks and return on investment. The latter is computed by an economic model, which relies on high quality input and must reflect the envisioned migration strategy sufficiently. To facilitate risk analysis, this paper applies Monte-Carlo simulation to an existing product line economic model. Additionally, the model is extended by the support of product line generations that is, considering the degeneration of product line infrastructures and taking reinvestment into an existing product line into account. The practical application of the model is demonstrated by an industrial case study.},
  file      = {:C\:/Users/HP/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Ganesan et al. - 2006 - Predicting Return-on-Investment for Product Line Generations.pdf:pdf},
  review    = {CE PM DRQ DD EE DT ARQ AD FE AT CONG},
}

@InProceedings{Martinez2018,
  author    = {Martinez, Jabier and T{\"{e}}rnava, Xhevahire and Ziadi, Tewfik},
  title     = {{Software product line extraction from variability-rich systems: The robocode case study}},
  booktitle = {International Software Product Line Conference},
  year      = {2018},
  volume    = {1},
  pages     = {132--142},
  month     = {aug},
  publisher = {Association for Computing Machinery},
  abstract  = {The engineering of a Software Product Line (SPL), either by creating it from scratch or through the re-engineering of existing variants, it uses to be a project that spans several years with a high investment. It is often hard to analyse and quantify this investment, especially in the context of extractive SPL adoption when the related software variants are independently created by different developers following different system architectures and implementation conventions. This paper reports an experience on the creation of an SPL by reengineering system variants implemented around an educational game called Robocode. The objective of this game is to program a bot (a battle tank) that battles against the bots of other developers. The world-wide Robocode community creates and maintains a large base of knowledge and implementations that are mainly organized in terms of features, although not presented as an SPL. Therefore, a group of master students analysed this variability-rich domain and extracted a Robocode SPL. We present the results of such extraction augmented with an analysis and a quantification regarding the spent time and effort. We believe that the results and the a-posteriori analysis can provide insights on global challenges on SPL adoption. We also provide all the elements to SPL educators to reproduce the teaching activity, and we make available this SPL to be used for any research purpose.},
  doi       = {10.1145/3233027.3233038},
  file      = {:C\:/Users/HP/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Martinez, T{\"{e}}rnava, Ziadi - 2018 - Software product line extraction from variability-rich systems The robocode case study.pdf:pdf},
  isbn      = {9781450363716},
  keywords  = {Education,Extractive software product line adoption,Reverse-engineering,Robocode,Software product lines},
  review    = {CE PM DRQ ARQ CONG},
}

@InProceedings{Wille2017,
  author    = {Wille, David and Wehling, Kenny and Seidl, Christoph and Pluchator, Martin and Schaefer, Ina},
  title     = {{Variability mining of technical architectures}},
  booktitle = {International Software Product Line Conference},
  year      = {2017},
  volume    = {1},
  pages     = {39--48},
  month     = {sep},
  publisher = {Association for Computing Machinery},
  abstract  = {Technical architectures (TAs) represent the computing infrastructure of a company with all its hardware and software components. Over the course of time, the number of TAs grows with the companies' requirements and usually a large variety of TAs has to be maintained. Core challenge is the missing information on relations between the existing variants of TAs, which complicates reuse of solutions across systems. However, identifying these relations is an expensive task as architects have to manually analyze each TA individually. Restructuring the existing TAs poses severe risks as often sufficient information is not available (e.g., due to time constraints). To avoid failures in productive systems and resulting loss of profit, companies continue to create new solutions without restructuring existing ones. This increased variability in TAs represents technical debt. In this paper, we adapt the idea of variability mining from the software product line domain and present an efficient and automatic mining algorithm to identify the common and varying parts of TAs by analyzing a potentially arbitrary number of TAs in parallel. Using the identified variability information, architects are capable of analyzing the relations of TAs, identifying reuse potential, and making well-founded maintenance decisions. We show the feasibility and scalability of our approach by applying it to a real-world industrial case study with large sets of TAs.},
  doi       = {10.1145/3106195.3106202},
  file      = {:C\:/Users/HP/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Wille et al. - 2017 - Variability mining of technical architectures.pdf:pdf},
  isbn      = {9781450352215},
  keywords  = {Enterprise architecture,Technical architecture,Variability mining},
  review    = {CE PM DRQ CONG},
}

@InProceedings{ThorstenBerger,
  author    = {Thorsten Berger,},
  title     = {{Variability Modeling in the Wild}},
  booktitle = {International Software Product Line Conference},
  year      = {2012},
  pages     = {287},
  file      = {:C\:/Users/HP/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Unknown - Unknown - Variability Modeling in the Wild.pdf:pdf},
  isbn      = {9781450310956},
  review    = {CE PM DRQ CONG},
}

@Comment{jabref-meta: databaseType:bibtex;}
