% Encoding: UTF-8

@Article{Galster2015,
  author   = {Matthias Galster and Paris Avgeriou},
  title    = {An industrial case study on variability handling in large enterprise software systems},
  journal  = {Information and Software Technology},
  year     = {2015},
  volume   = {60},
  pages    = {16 - 31},
  issn     = {0950-5849},
  abstract = {Context
Enterprise software systems (e.g., enterprise resource planning software) are often deployed in different contexts (e.g., different organizations or different business units or branches of one organization). However, even though organizations, business units or branches have the same or similar business goals, they may differ in how they achieve these goals. Thus, many enterprise software systems are subject to variability and adapted depending on the context in which they are used.
Objective
Our goal is to provide a snapshot of variability in large scale enterprise software systems. We aim at understanding the types of variability that occur in large industrial enterprise software systems. Furthermore, we aim at identifying how variability is handled in such systems.
Method
We performed an exploratory case study in two large software organizations, involving two large enterprise software systems. Data were collected through interviews and document analysis. Data were analyzed following a grounded theory approach.
Results
We identified seven types of variability (e.g., functionality, infrastructure) and eight mechanisms to handle variability (e.g., add-ons, code switches).
Conclusions
We provide generic types for classifying variability in enterprise software systems, and reusable mechanisms for handling such variability. Some variability types and handling mechanisms for enterprise software systems found in the real world extend existing concepts and theories. Others confirm findings from previous research literature on variability in software in general and are therefore not specific to enterprise software systems. Our findings also offer a theoretical foundation for describing variability handling in practice. Future work needs to provide more evaluations of the theoretical foundations, and refine variability handling mechanisms into more detailed practices.},
  comment  = {16},
  doi      = {https://doi.org/10.1016/j.infsof.2014.12.003},
  keywords = {Variability, Enterprise software systems, Case study, Grounded theory},
  url      = {http://www.sciencedirect.com/science/article/pii/S0950584914002572},
}

@Article{Deelstra2005a,
  author        = {Sybren Deelstra and Marco Sinnema and Jan Bosch},
  title         = {Product derivation in software product families: a case study},
  journal       = {Journal of Systems and Software},
  year          = {2005},
  volume        = {74},
  number        = {2},
  pages         = {173 - 194},
  issn          = {0164-1212},
  note          = {The new context for software engineering education and training},
  __markedentry = {[mac:]},
  abstract      = {From our experience with several organizations that employ software product families, we have learned that, contrary to popular belief, deriving individual products from shared software assets is a time-consuming and expensive activity. In this paper we therefore present a study that investigated the source of those problems. We provide the reader with a framework of terminology and concepts regarding product derivation. In addition, we present several problems and issues we identified during a case study at two large industrial organizations that are relevant to other, for example, comparable or less mature organizations.},
  comment       = {22},
  doi           = {https://doi.org/10.1016/j.jss.2003.11.012},
  keywords      = {Case study, Software product family, Product derivation, Variability management},
  url           = {http://www.sciencedirect.com/science/article/pii/S0164121203003121},
}

@Article{Bastos2017a,
  author   = {Jonatas Ferreira Bastos and Paulo Anselmo da Mota Silveira Neto and Pádraig O’Leary and Eduardo Santana de Almeida and Silvio Romero de Lemos Meira},
  title    = {Software product lines adoption in small organizations},
  journal  = {Journal of Systems and Software},
  year     = {2017},
  volume   = {131},
  pages    = {112 - 128},
  issn     = {0164-1212},
  abstract = {Context
An increasing number of studies has demonstrated improvements in product quality, and time-to-market reductions when Software Product Line (SPL) engineering is introduced. However, despite the amount of successful stories about the use of SPL engineering, there is a lack of guidelines to support its adoption, especially to small-sized software organizations.
Objective
The aim of this study is to investigate SPL adoption in small organizations and to improve the generalization of evidence through the use of a multi-method approach.
Method
This paper reports on a multi-method study, where results from a mapping study, industrial case study and also expert opinion survey were considered to identify a set of findings.
Results
The study provides a better understanding of SPL adoption in the context of small to medium-sized organizations, by documenting evidence observed during the transition from single-system development to an SPL approach. This evidence is strengthened by the use of different research methods, which results in 22 findings regarding to the SPL adoption.
Conclusion
This research has synthesized the available evidence in SPL adoption and identifies gaps between required strategies, organizational structures, maturity level and existing adoption barriers. These findings are an important step to establish guidelines for SPL adoption.},
  comment  = {17},
  doi      = {https://doi.org/10.1016/j.jss.2017.05.052},
  keywords = {Software product lines, SPL adoption, Adoption barriers, Multi-method approach, Case study, Survey, Mapping study},
  url      = {http://www.sciencedirect.com/science/article/pii/S0164121217300997},
}

@Article{DaSilva2014,
  author        = {Da Silva, I.F. and Da Mota Silveira Neto, P.A. and O'Leary, P. and De Almeida, E.S. and Meira, S.R.D.L.},
  title         = {Software product line scoping and requirements engineering in a small and medium-sized enterprise: An industrial case study},
  journal       = {Journal of Systems and Software},
  year          = {2014},
  volume        = {88},
  number        = {1},
  pages         = {189-206},
  note          = {cited By 9},
  abstract      = {Software product line (SPL) engineering has been applied in several domains, especially in large-scale software development. Given the benefits experienced and reported, SPL engineering has increasingly garnered interest from small to medium-sized companies. It is possible to find a wide range of studies reporting on the challenges of running a SPL project in large companies. However, very little reports exist that consider the situation for small to medium-sized enterprises and these studies try develop universal truths for SPL without lessons learned from empirical evidence need to be contextualized. This study is a step towards bridging this gap in contextual evidence by characterizing the weaknesses discovered in the scoping (SC) and requirements (RE) disciplines of SPL. Moreover, in this study we conducted a case study in a small to medium sized enterprises (SMEs) to justify the use of agile methods when introducing the SPL SC and RE disciplines through the characterization of their bottlenecks. The results of the characterization indicated that ineffective communication and collaboration, long iteration cycles, and the absence of adaptability and flexibility can increase the effort and reduce motivation during project development. These issues can be mitigated by agile methods. © 2013 Elsevier Inc. All rights reserved.},
  comment       = {18},
  document_type = {Article},
  doi           = {10.1016/j.jss.2013.10.040},
  keywords      = {rank5},
  source        = {Scopus},
  url           = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84891625335&doi=10.1016%2fj.jss.2013.10.040&partnerID=40&md5=dd69d4becd8b94d2bc063e89827148e2},
}

@Article{Souza2013b,
  author   = {Iuri Santos Souza and Gecynalda Soares da Silva Gomes and Paulo Anselmo da Mota Silveira Neto and Ivan do Carmo Machado and Eduardo Santana de Almeida and Silvio Romero de Lemos Meira},
  title    = {Evidence of software inspection on feature specification for software product lines},
  journal  = {Journal of Systems and Software},
  year     = {2013},
  volume   = {86},
  number   = {5},
  pages    = {1172 - 1190},
  issn     = {0164-1212},
  abstract = {In software product lines (SPL), scoping is a phase responsible for capturing, specifying and modeling features, and also their constraints, interactions and variations. The feature specification task, performed in this phase, is usually based on natural language, which may lead to lack of clarity, non-conformities and defects. Consequently, scoping analysts may introduce ambiguity, inconsistency, omissions and non-conformities. In this sense, this paper aims at gathering evidence about the effects of applying an inspection approach to feature specification for SPL. Data from a SPL reengineering project were analyzed in this work and the analysis indicated that the correction activity demanded more effort. Also, Pareto's principle showed that incompleteness and ambiguity reported higher non-conformity occurrences. Finally, the Poisson regression analysis showed that sub-domain risk information can be a good indicator for prioritization of sub-domains in the inspection activity.},
  comment  = {19},
  doi      = {https://doi.org/10.1016/j.jss.2012.11.044},
  keywords = {Software quality control, Software inspection, Software product lines, Empirical study},
  url      = {http://www.sciencedirect.com/science/article/pii/S0164121212003251},
}

@Article{Hanssen2008,
  author        = {Hanssen, G.K. and Fægri, T.E.},
  title         = {Process fusion: An industrial case study on agile software product line engineering},
  journal       = {Journal of Systems and Software},
  year          = {2008},
  volume        = {81},
  number        = {6},
  pages         = {843-854},
  note          = {cited By 49},
  abstract      = {This paper presents a case study of a software product company that has successfully integrated practices from software product line engineering and agile software development. We show how practices from the two fields support the company's strategic and tactical ambitions, respectively. We also discuss how the company integrates strategic, tactical and operational processes to optimize collaboration and consequently improve its ability to meet market needs, opportunities and challenges. The findings from this study are relevant to software product companies seeking ways to balance agility and product management. The findings also contribute to research on industrializing software engineering. © 2007 Elsevier Inc. All rights reserved.},
  comment       = {12},
  document_type = {Article},
  doi           = {10.1016/j.jss.2007.10.025},
  source        = {Scopus},
  url           = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-42049088680&doi=10.1016%2fj.jss.2007.10.025&partnerID=40&md5=70bc5b3b44f009b164aebff9608f2e82},
}

@Article{Diaz2014,
  author        = {Díaz, J. and Pérez, J. and Garbajosa, J.},
  title         = {Agile product-line architecting in practice: A case study in smart grids},
  journal       = {Information and Software Technology},
  year          = {2014},
  volume        = {56},
  number        = {7},
  pages         = {727-748},
  note          = {cited By 14},
  abstract      = {Context Software Product Line Engineering implies the upfront design of a Product-Line Architecture (PLA) from which individual product applications can be engineered. The big upfront design associated with PLAs is in conflict with the current need of "being open to change". To make the development of product-lines more flexible and adaptable to changes, several companies are adopting Agile Product Line Engineering. However, to put Agile Product Line Engineering into practice it is still necessary to make mechanisms available to assist and guide the agile construction and evolution of PLAs. Objective This paper presents the validation of a process for "the agile construction and evolution of product-line architectures", called Agile Product-Line Architecting (APLA). The contribution of the APLA process is the integration of a set of models for describing, documenting, and tracing PLAs, as well as an algorithm for guiding the change decision-making process of PLAs. The APLA process is assessed to prove that assists Agile Product Line Engineering practitioners in the construction and evolution of PLAs. Method Validation is performed through a case study by using both quantitative and qualitative analysis. Quantitative analysis was performed using statistics, whereas qualitative analysis was performed through interviews using constant comparison, triangulation, and supporting tools. This case study was conducted according to the guidelines of Runeson and Höst in a software factory where three projects in the domain of Smart Grids were involved. Results APLA is deployed through the Flexible-PLA modeling framework. This framework supported the successful development and evolution of the PLA of a family of power metering management applications for Smart Grids. Conclusions APLA is a well-supported solution for the agile construction and evolution of PLAs. This case study illustrates that the proposed solution for the agile construction of PLAs is viable in an industry project on Smart Grids. © 2014 Elsevier B.V. All rights reserved.},
  comment       = {22},
  document_type = {Article},
  doi           = {10.1016/j.infsof.2014.01.014},
  source        = {Scopus},
  url           = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84898810060&doi=10.1016%2fj.infsof.2014.01.014&partnerID=40&md5=79cd1ad172a29071b1a41d63ef7c884c},
}

@Article{Engstroem2013a,
  author   = {Emelie Engström and Per Runeson},
  title    = {Test overlay in an emerging software product line – An industrial case study},
  journal  = {Information and Software Technology},
  year     = {2013},
  volume   = {55},
  number   = {3},
  pages    = {581 - 594},
  issn     = {0950-5849},
  note     = {Special Issue on Software Reuse and Product Lines},
  abstract = {Context
In large software organizations with a product line development approach, system test planning and scope selection is a complex task. Due to repeated testing: across different testing levels, over time (test for regression) as well as of different variants, the risk of redundant testing is large as well as the risk of overlooking important tests, hidden by the huge amount of possible tests.
Aims
This study assesses the amount and type of overlaid manual testing across feature, integration and system test in such context, it explores the causes of potential redundancy and elaborates on how to provide decision support in terms of visualization for the purpose of avoiding redundancy.
Method
An in-depth case study was launched including both qualitative and quantitative observations.
Results
A high degree of test overlay is identified originating from distributed test responsibilities, poor documentation and structure of test cases, parallel work and insufficient delta analysis. The amount of test overlay depends on which level of abstraction is studied.
Conclusions
Avoiding redundancy requires tool support, e.g. visualization of test design coverage, test execution progress, priorities of coverage items as well as visualized priorities of variants to support test case selection.},
  comment  = {14},
  doi      = {https://doi.org/10.1016/j.infsof.2012.04.009},
  keywords = {Product-line, Software testing, Case study, Overlay, Redundancy, Efficiency},
  url      = {http://www.sciencedirect.com/science/article/pii/S0950584912001061},
}

@Article{Eriksson2009,
  author        = {Eriksson, M. and Börstler, J. and Borg, K.},
  title         = {Managing requirements specifications for product lines - An approach and industry case study},
  journal       = {Journal of Systems and Software},
  year          = {2009},
  volume        = {82},
  number        = {3},
  pages         = {435-447},
  note          = {cited By 33},
  abstract      = {Software product line development has emerged as a leading approach for software reuse. This paper describes an approach to manage natural-language requirements specifications in a software product line context. Variability in such product line specifications is modeled and managed using a feature model. The proposed approach has been introduced in the Swedish defense industry. We present a multiple-case study covering two different product lines with in total eight product instances. These were compared to experiences from previous projects in the organization employing clone-and-own reuse. We conclude that the proposed product line approach performs better than clone-and-own reuse of requirements specifications in this particular industrial context. © 2008 Elsevier Inc. All rights reserved.},
  comment       = {13},
  document_type = {Article},
  doi           = {10.1016/j.jss.2008.07.046},
  source        = {Scopus},
  url           = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-61349133483&doi=10.1016%2fj.jss.2008.07.046&partnerID=40&md5=0a3ae64dcba52802d30b67dc41cef4f1},
}

@Article{Diaz2015,
  author        = {Díaz, J. and Pérez, J. and Garbajosa, J.},
  title         = {A model for tracing variability from features to product-line architectures: A case study in smart grids},
  journal       = {Requirements Engineering},
  year          = {2015},
  volume        = {20},
  number        = {3},
  pages         = {323-343},
  note          = {cited By 6},
  abstract      = {In current software systems with highly volatile requirements, traceability plays a key role to maintain the consistency between requirements and code. Traceability between artifacts involved in the development of software product line (SPL) is still more critical because it is necessary to guarantee that the selection of variants that realize the different SPL products meet the requirements. Current SPL traceability mechanisms trace from variability in features to variations in the configuration of product-line architecture (PLA) in terms of adding and removing components. However, it is not always possible to materialize the variable features of a SPL through adding or removing components, since sometimes they are materialized inside components, i.e., in part of their functionality: a class, a service, and/or an interface. Additionally, variations that happen inside components may crosscut several components of architecture. These kinds of variations are still challenging and their traceability is not currently well supported. Therefore, it is not possible to guarantee that those SPL products with these kinds of vriations meet the requirements. This paper presents a solution for tracing variability from features to PLA by taking these kinds of variations into account. This solution is based on models and traceability between models in order to automate SPL configuration by selecting the variants and realizing the product application. The FPLA modeling framework supports this solution which has been deployed in a software factory. Validation has consisted in putting the solution into practice to develop a product line of power metering management applications for smart grids. © Springer-Verlag London 2014.},
  art_number    = {A003},
  comment       = {21},
  document_type = {Article},
  doi           = {10.1007/s00766-014-0203-1},
  source        = {Scopus},
  url           = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84943353769&doi=10.1007%2fs00766-014-0203-1&partnerID=40&md5=2b9700810f69105f1098e29cc8ca542c},
}

@Article{Koziolek2016,
  author        = {Koziolek, H. and Goldschmidt, T. and de Gooijer, T. and Domis, D. and Sehestedt, S. and Gamer, T. and Aleksy, M.},
  title         = {Assessing software product line potential: an exploratory industrial case study},
  journal       = {Empirical Software Engineering},
  year          = {2016},
  volume        = {21},
  number        = {2},
  pages         = {411-448},
  note          = {cited By 4},
  abstract      = {Corporate organizations sometimes offer similar software products in certain domains due to former company mergers or due to the complexity of the organization. The functional overlap of such products is an opportunity for future systematic reuse to reduce software development and maintenance costs. Therefore, we have tailored existing domain analysis methods to our organization to identify commonalities and variabilities among such products and to assess the potential for software product line (SPL) approaches. As an exploratory case study, we report on our experiences and lessons learned from conducting the domain analysis in four application cases with large-scale software products. We learned that the outcome of a domain analysis was often a smaller integration scenario instead of an SPL and that business case calculations were less relevant for the stakeholders and managers from the business units during this phase. We also learned that architecture reconstruction using a simple block diagram notation aids domain analysis and that large parts of our approach were reusable across application cases. © 2015, Springer Science+Business Media New York.},
  comment       = {38},
  document_type = {Article},
  doi           = {10.1007/s10664-014-9358-0},
  source        = {Scopus},
  url           = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84922424792&doi=10.1007%2fs10664-014-9358-0&partnerID=40&md5=d52527a44c67d5bcbcaab488aa82cc99},
}

@Article{Oliveira2014a,
  author        = {de Oliveira, R.P. and Blanes, D. and Gonzalez-Huerta, J. and Insfran, E. and Abrahão, S. and Cohen, S. and de Almeida, E.S.},
  title         = {Defining and validating a feature-driven requirements engineering approach},
  journal       = {Journal of Universal Computer Science},
  year          = {2014},
  volume        = {20},
  number        = {5},
  pages         = {666-691},
  note          = {cited By 1},
  abstract      = {The specification of requirements is a key activity for achieving the goals of any software project and it has long been established and recognized by researchers and practitioners. Within Software Product Lines (SPL), this activity is even more critical owing to the need to deal with common, variable, and product-specific requirements, not only for a single product but for the whole set of products. In this paper, we present a Feature-Driven Requirements Engineering approach (FeDRE) that provides support to the requirements specification of SPL. The approach realizes features into functional requirements by considering the variability captured in a feature model. It also provides detailed guidelines on how to associate chunks of features from a feature model and to consider them as the context for the Use Case specification. The evaluation of the approach is illustrated in a case study for developing an SPL of mobile applications for emergency notifications. This case study was applied within 14 subjects, 8 subjects from Universitat Politècnica de València and 6 subjects from Federal University of Bahia. Evaluations concerning the perceived ease of use, perceived usefulness, effectiveness and efficiency as regards requirements analysts using the approach are also presented. The results show that FeDRE was perceived as easy to learn and useful by the participants. © J.UCS.},
  comment       = {26},
  document_type = {Article},
  source        = {Scopus},
  url           = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84904769020&partnerID=40&md5=31d21d19a0249965fa4b5f0742277f51},
}

@Article{Bosch2011b,
  author        = {Bosch, J. and Bosch-Sijtsema, P.M.},
  title         = {Introducing agile customer-centered development in a legacy software product line},
  journal       = {Software - Practice and Experience},
  year          = {2011},
  volume        = {41},
  number        = {8},
  pages         = {871-882},
  note          = {cited By 20},
  abstract      = {The ability to rapidly respond to customer interest and to effectively prioritize development effort has been a long-standing challenge for mass-market software intensive products. This problem is exacerbated in the context of software product lines as functionality may easily fall over software asset and organizational boundaries with consequent losses in efficiency and nimbleness. Some companies facing these problems in their product line respond with a new development process. In this paper we discuss the developments within a single case study, Intuit's Quickbooks product line that combined agile software development, design thinking and self-organizing teams in a successful approach, which provided a significant improvement in terms of responsiveness and accuracy of building customer value. Copyright © 2011 John Wiley & Sons, Ltd.},
  comment       = {12},
  document_type = {Article},
  doi           = {10.1002/spe.1063},
  source        = {Scopus},
  url           = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-79958247118&doi=10.1002%2fspe.1063&partnerID=40&md5=b2bfc7317e1d83ae546384531cf74963},
}

@Article{Dey2017,
  author   = {Sangeeta Dey and Seok-Won Lee},
  title    = {REASSURE: Requirements elicitation for adaptive socio-technical systems using repertory grid},
  journal  = {Information and Software Technology},
  year     = {2017},
  volume   = {87},
  pages    = {160 - 179},
  issn     = {0950-5849},
  abstract = {Context
Socio-technical systems are expected to understand the dynamics of the execution environment and behave accordingly. Significant work has been done on formalizing and modeling requirements of such adaptive systems. However, not enough attention is paid on eliciting requirements from users and introducing flexibility in the system behavior at an early phase of requirements engineering. Most of the work is based on an assumption that general users’ cognitive level would be able to support the inherent complexity of variability acquisition.
Objective
Our main focus is on providing help to the users with ordinary cognitive level to express their expectations from the complex system considering various contexts. This work also helps the designers to explore the design variability based on the general users’ preferences.
Method
We explore the idea of using a cognitive technique Repertory Grid (RG) to acquire knowledge from users and experts along multiple dimensions of problem and design space. We propose REASSURE methodology which guides requirements engineers to explore the intentional and design variability in an organized way. We also provide a tool support to analyze the knowledge captured in multiple repertory grid files and detect potential conflicts in the intentional variability. Finally, we evaluate the proposed idea by performing an empirical study using smart home system domain.
Results
The result of our study shows that a greater number of requirements can be elicited after applying our approach. With the help of the provided tool support, it is even possible to detect a greater number of conflicts in user’s requirements than the traditional practices.
Conclusion
We envision RG as a technique to filter design options based on the intentional variability in various contexts. The promising results of empirical study open up new research questions: “how to elicit requirements from multiple stakeholders and reach consensus for multi-dimensional problem domain”.},
  comment  = {20},
  doi      = {https://doi.org/10.1016/j.infsof.2017.03.004},
  keywords = {Requirements elicitation, Adaptive systems, Socio-technical systems, Repertory grid},
  url      = {http://www.sciencedirect.com/science/article/pii/S095058491730229X},
}

@Article{Ahmed2007b,
  author   = {Faheem Ahmed and Luiz Fernando Capretz and Shahbaz Ali Sheikh},
  title    = {Institutionalization of software product line: An empirical investigation of key organizational factors},
  journal  = {Journal of Systems and Software},
  year     = {2007},
  volume   = {80},
  number   = {6},
  pages    = {836 - 849},
  issn     = {0164-1212},
  abstract = {A good fit between the person and the organization is essential in a better organizational performance. This is even more crucial in case of institutionalization of a software product line practice within an organization. Employees’ participation, organizational behavior and management contemplation play a vital role in successfully institutionalizing software product lines in a company. Organizational dimension has been weighted as one of the critical dimensions in software product line theory and practice. A comprehensive empirical investigation to study the impact of some organizational factors on the performance of software product line practice is presented in this work. This is the first study to empirically investigate and demonstrate the relationships between some of the key organizational factors and software product line performance of an organization. The results of this investigation provide empirical evidence and further support the theoretical foundations that in order to institutionalize software product lines within an organization, organizational factors play an important role.},
  comment  = {14},
  doi      = {https://doi.org/10.1016/j.jss.2006.09.010},
  keywords = {Software product line, Empirical software engineering, Organizational theory, Organizational management, Organizational behavior},
  url      = {http://www.sciencedirect.com/science/article/pii/S0164121206002627},
}

@Article{Kim2008b,
  author   = {Jintae Kim and Sooyong Park and Vijayan Sugumaran},
  title    = {DRAMA: A framework for domain requirements analysis and modeling architectures in software product lines},
  journal  = {Journal of Systems and Software},
  year     = {2008},
  volume   = {81},
  number   = {1},
  pages    = {37 - 55},
  issn     = {0164-1212},
  abstract = {One of the benefits of software product line approach is to improve time-to-market. The changes in market needs cause software requirements to be flexible in product lines. Whenever software requirements are changed, software architecture should be evolved to correspond with them. Therefore, domain architecture should be designed based on domain requirements. It is essential that there is traceability between requirements and architecture, and that the structure of architecture is derived from quality requirements. The purpose of this paper is to provide a framework for modeling domain architecture based on domain requirements within product lines. In particular, we focus on the traceable relationship between requirements and architectural structures. Our framework consists of processes, methods, and a supporting tool. It uses four basic concepts, namely, goal based domain requirements analysis, Analytical Hierarchy Process, Matrix technique, and architecture styles. Our approach is illustrated using HIS (Home Integration System) product line. Finally, industrial examples are used to validate DRAMA.},
  comment  = {19},
  doi      = {https://doi.org/10.1016/j.jss.2007.04.011},
  keywords = {Domain requirements, Domain architecture, Traceability, Quality attribute},
  url      = {http://www.sciencedirect.com/science/article/pii/S016412120700088X},
}

@Article{Hanssen2011,
  author        = {Hanssen, G.K.},
  title         = {Agile software product line engineering: Enabling factors},
  journal       = {Software - Practice and Experience},
  year          = {2011},
  volume        = {41},
  number        = {8},
  pages         = {883-897},
  note          = {cited By 5},
  abstract      = {This paper reports on a study of a software product line organization that has adopted agile software development to address process rigidity and slowing performance. Experience has showed that despite some impediments, this has become a valuable change to both the organization and its development process. The aim of this study is to identify and understand enabling factors of a combined process, and to understand their subsequent effects. Qualitative data are summarized and analyzed, giving insight into the actions taken, their effects that have emerged over time, and the enabling and contextual factors. The study concludes that a combined process is feasible, that the simplified approach makes the organization more flexible and thus capable of serving a volatile market with fast-changing technologies. This has also enabled the organization to collaborate better with external actors. Copyright © 2011 John Wiley & Sons, Ltd.},
  comment       = {15},
  document_type = {Article},
  doi           = {10.1002/spe.1064},
  source        = {Scopus},
  url           = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-79958281206&doi=10.1002%2fspe.1064&partnerID=40&md5=c50cda5a08c3f2e8eb05f37a2cdc5aa3},
}

@Article{Eklund2013,
  author   = {Ulrik Eklund and Håkan Gustavsson},
  title    = {Architecting automotive product lines: Industrial practice},
  journal  = {Science of Computer Programming},
  year     = {2013},
  volume   = {78},
  number   = {12},
  pages    = {2347 - 2359},
  issn     = {0167-6423},
  note     = {Special Section on International Software Product Line Conference 2010 and Fundamentals of Software Engineering (selected papers of FSEN 2011)},
  abstract = {This paper presents an in-depth view of how architects work with maintaining product line architectures at two internationally well-known automotive companies. The case study shows several interesting results. The process of managing architectural changes as well as the information the architects maintain and update is surprisingly similar between the two companies, despite that one has a strong line organisation and the other a strong project organisation. The architecting process found does not differ from what can be seen in other business domains. What does differ is that the architects studied see themselves interacting much more with other stakeholders than architects in general. The actual architectures are based on similar technology, e.g. CAN, but the network topology, S/W deployment and interfaces are totally different. The results indicate how the company’s different core values influence the architects when defining and maintaining the architectures over time. One company maintains four similar architectures in parallel, each at a different stage in their respective life-cycle, while the other has a single architecture for all products since 2002. The organisational belonging of the architects in the former company has been turbulent in contrast to the latter and there is some speculation if this is correlated.},
  comment  = {13},
  doi      = {https://doi.org/10.1016/j.scico.2012.06.008},
  keywords = {Architecting, Process, Case study, Automotive industry},
  url      = {http://www.sciencedirect.com/science/article/pii/S0167642312001190},
}

@Article{Classen2011a,
  author   = {Andreas Classen and Quentin Boucher and Patrick Heymans},
  title    = {A text-based approach to feature modelling: Syntax and semantics of TVL},
  journal  = {Science of Computer Programming},
  year     = {2011},
  volume   = {76},
  number   = {12},
  pages    = {1130 - 1143},
  issn     = {0167-6423},
  note     = {Special Issue on Software Evolution, Adaptability and Variability},
  abstract = {In the scientific community, feature models are the de-facto standard for representing variability in software product line engineering. This is different from industrial settings where they appear to be used much less frequently. We and other authors found that in a number of cases, they lack concision, naturalness and expressiveness. This is confirmed by industrial experience. When modelling variability, an efficient tool for making models intuitive and concise are feature attributes. Yet, the semantics of feature models with attributes is not well understood and most existing notations do not support them at all. Furthermore, the graphical nature of feature models’ syntax also appears to be a barrier to industrial adoption, both psychological and rational. Existing tool support for graphical feature models is lacking or inadequate, and inferior in many regards to tool support for text-based formats. To overcome these shortcomings, we designed TVL, a text-based feature modelling language. In terms of expressiveness, TVL subsumes most existing dialects. The main goal of designing TVL was to provide engineers with a human-readable language with a rich syntax to make modelling easy and models natural, but also with a formal semantics to avoid ambiguity and allow powerful automation.},
  comment  = {14},
  doi      = {https://doi.org/10.1016/j.scico.2010.10.005},
  keywords = {Feature models, Code, Modelling, Language, Syntax, Semantics, Software product lines},
  url      = {http://www.sciencedirect.com/science/article/pii/S0167642310001899},
}

@Article{Costa2015a,
  author   = {Gabriella Castro B. Costa and Regina Braga and José Maria N. David and Fernanda Campos},
  title    = {A Scientific Software Product Line for the Bioinformatics domain},
  journal  = {Journal of Biomedical Informatics},
  year     = {2015},
  volume   = {56},
  pages    = {239 - 264},
  issn     = {1532-0464},
  abstract = {Context
Most specialized users (scientists) that use bioinformatics applications do not have suitable training on software development. Software Product Line (SPL) employs the concept of reuse considering that it is defined as a set of systems that are developed from a common set of base artifacts. In some contexts, such as in bioinformatics applications, it is advantageous to develop a collection of related software products, using SPL approach. If software products are similar enough, there is the possibility of predicting their commonalities, differences and then reuse these common features to support the development of new applications in the bioinformatics area.
Objectives
This paper presents the PL-Science approach which considers the context of SPL and ontology in order to assist scientists to define a scientific experiment, and to specify a workflow that encompasses bioinformatics applications of a given experiment. This paper also focuses on the use of ontologies to enable the use of Software Product Line in biological domains.
Method
In the context of this paper, Scientific Software Product Line (SSPL) differs from the Software Product Line due to the fact that SSPL uses an abstract scientific workflow model. This workflow is defined according to a scientific domain and using this abstract workflow model the products (scientific applications/algorithms) are instantiated.
Results
Through the use of ontology as a knowledge representation model, we can provide domain restrictions as well as add semantic aspects in order to facilitate the selection and organization of bioinformatics workflows in a Scientific Software Product Line. The use of ontologies enables not only the expression of formal restrictions but also the inferences on these restrictions, considering that a scientific domain needs a formal specification.
Conclusions
This paper presents the development of the PL-Science approach, encompassing a methodology and an infrastructure, and also presents an approach evaluation. This evaluation presents case studies in bioinformatics, which were conducted in two renowned research institutions in Brazil.},
  comment  = {26},
  doi      = {https://doi.org/10.1016/j.jbi.2015.05.014},
  keywords = {Scientific workflow, Sequence alignment, Software Product Line, Ontology, Feature model},
  url      = {http://www.sciencedirect.com/science/article/pii/S1532046415000945},
}

@Article{Silva2015,
  author   = {Ivonei Freitas da Silva and Paulo Anselmo da Mota Silveira Neto and Pádraig O’Leary and Eduardo Santana de Almeida and Silvio Romero de Lemos Meira},
  title    = {Using a multi-method approach to understand Agile software product lines},
  journal  = {Information and Software Technology},
  year     = {2015},
  volume   = {57},
  pages    = {527 - 542},
  issn     = {0950-5849},
  abstract = {Context
Software product lines (SPLs) and Agile are approaches that share similar objectives. The main difference is the way in which these objectives are met. Typically evidence on what activities of Agile and SPL can be combined and how they can be integrated stems from different research methods performed separately. The generalizability of this evidence is low, as the research topic is still relatively new and previous studies have been conducted using only one research method.
Objective
This study aims to increase understanding of Agile SPL and improve the generalizability of the identified evidence through the use of a multi-method approach.
Method
Our multi-method research combines three complementary methods (Mapping Study, Case Study and Expert Opinion) to consolidate the evidence.
Results
This combination results in 23 findings that provide evidence on how Agile and SPL could be combined.
Conclusion
Although multi-method research is time consuming and requires a high degree of effort to plan, design, and perform, it helps to increase the understanding on Agile SPL and leads to more generalizable evidence. The findings confirm a synergy between Agile and SPL and serve to improve the body of evidence in Agile SPL. When researchers and practitioners develop new Agile SPL approaches, it will be important to consider these synergies.},
  comment  = {16},
  doi      = {https://doi.org/10.1016/j.infsof.2014.06.004},
  keywords = {Agile, Software product lines, Multi-method approach, Case study, Mapping study, Expert opinion},
  url      = {http://www.sciencedirect.com/science/article/pii/S0950584914001438},
}

@Article{DeSouza2015,
  author        = {De Souza, L.O. and O'Leary, P. and De Almeida, E.S. and De Lemos Meira, S.R.},
  title         = {Product derivation in practice},
  journal       = {Information and Software Technology},
  year          = {2015},
  volume        = {58},
  pages         = {319-337},
  note          = {cited By 1},
  abstract      = {Context: The process of constructing a product from a product line of software assets is known product derivation. An effective product derivation process is important in order to ensure that the efforts required to develop these shared assets is lower than the benefits achieved through their use. Despite its importance, relatively little work has been dedicated to the product derivation process and the strategies applied in practice. Additionally, there is a lack of empirical reports describing product derivation in industrial settings, and, in general, where these reports are available, they have been conducted as informal studies. Objective: Our aim is to investigate how product derivation is performed in practice. Method: We apply a multi-case study design to two different industrial software product line projects with the goal of investigating how they derive their products in practice. The findings from our studies were individually analyzed using the Constant Comparison technique. In order to identify patterns across these studies, the findings were compared using a Cross-case analysis approach. Results: The research approach allowed us to examine the case study outcomes from different perspectives, capturing similarities and differences. From the cases, we identified context specific strategies for product derivation which are easier for practitioners to contextualise and implement. Conclusions: The case studies provide method-in-action insights into concepts explored in the literature, such as: iterative and incremental product derivation, instantiation and integration of platform components and derivation of product databases. Practitioners can use this work as a basis for defining, adapting or evaluating their own product derivation approaches. While researchers can use this work as a starting point for new industrial reports, presenting their experiences with product derivation. © 2014 Elsevier B.V. All rights reserved.},
  comment       = {19},
  document_type = {Article},
  doi           = {10.1016/j.infsof.2014.07.004},
  source        = {Scopus},
  url           = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84914144344&doi=10.1016%2fj.infsof.2014.07.004&partnerID=40&md5=161e2856a77bae190e2fc6e05556a2fe},
}

@Article{Deelstra2009,
  author   = {Sybren Deelstra and Marco Sinnema and Jan Bosch},
  title    = {Variability assessment in software product families},
  journal  = {Information and Software Technology},
  year     = {2009},
  volume   = {51},
  number   = {1},
  pages    = {195 - 218},
  issn     = {0950-5849},
  note     = {Special Section - Most Cited Articles in 2002 and Regular Research Papers},
  abstract = {Software variability management is a key factor in the success of software systems and software product families. An important aspect of software variability management is the evolution of variability in response to changing markets, business needs, and advances in technology. To be able to determine whether, when, and how variability should evolve, we have developed the COVAMOF software variability assessment method (COSVAM). The contribution of COSVAM is that it is a novel, and industry-strength assessment process that addresses the issues that are associated to the current variability assessment practice. In this paper, we present the successful validation of COSVAM in an industrial software product family.},
  comment  = {24},
  doi      = {https://doi.org/10.1016/j.infsof.2008.04.002},
  keywords = {Software product families, Variability, Assessment, Evolution},
  url      = {http://www.sciencedirect.com/science/article/pii/S0950584908000542},
}

@Article{Usman2017a,
  author   = {Muhammad Usman and Muhammad Zohaib Iqbal and Muhammad Uzair Khan},
  title    = {A product-line model-driven engineering approach for generating feature-based mobile applications},
  journal  = {Journal of Systems and Software},
  year     = {2017},
  volume   = {123},
  pages    = {1 - 32},
  issn     = {0164-1212},
  abstract = {A significant challenge faced by the mobile application industry is developing and maintaining multiple native variants of mobile applications to support different mobile operating systems, devices and varying application functional requirements. The current industrial practice is to develop and maintain these variants separately. Any potential change has to be applied across variants manually, which is neither efficient nor scalable. We consider the problem of supporting multiple platforms as a ‘software product-line engineering’ problem. The paper proposes a novel application of product-line model-driven engineering to mobile application development and addresses the key challenges of feature-based native mobile application variants for multiple platforms. Specifically, we deal with three types of variations in mobile applications: variation due to operation systems and their versions, software and hardware capabilities of mobile devices, and functionalities offered by the mobile application. We develop a tool MOPPET that automates the proposed approach. Finally, the results of applying the approach on two industrial case studies show that the proposed approach is applicable to industrial mobile applications and have potential to significantly reduce the development effort and time.},
  comment  = {32},
  doi      = {https://doi.org/10.1016/j.jss.2016.09.049},
  keywords = {Mobile applications, Software product-line engineering, Feature model},
  url      = {http://www.sciencedirect.com/science/article/pii/S0164121216301972},
}

@Article{Zhang2014,
  author        = {Zhang, G. and Ye, H. and Lin, Y.},
  title         = {Quality attribute modeling and quality aware product configuration in software product lines},
  journal       = {Software Quality Journal},
  year          = {2014},
  volume        = {22},
  number        = {3},
  pages         = {365-401},
  note          = {cited By 14},
  abstract      = {In software product line engineering, the customers mostly concentrate on the functionalities of the target product during product configuration. The quality attributes of a target product, such as security and performance, are often assessed until the final product is generated. However, it might be very costly to fix the problem if it is found that the generated product cannot satisfy the customers’ quality requirements. Although the quality of a generated product will be affected by all the life cycles of product development, feature-based product configuration is the first stage where the estimation or prediction of the quality attributes should be considered. As we know, the key issue of predicting the quality attributes for a product configured from feature models is to measure the interdependencies between functional features and quality attributes. The current existing approaches have several limitations on this issue, such as requiring real products for the measurement or involving domain experts’ efforts. To overcome these limitations, we propose a systematic approach of modeling quality attributes in feature models based on domain experts’ judgments using the analytic hierarchical process (AHP) and conducting quality aware product configuration based on the captured quality knowledge. Domain experts’ judgments are adapted to avoid generating the real products for quality evaluation, and AHP is used to reduce domain experts’ efforts involved in the judgments. A prototype tool is developed to implement the concepts of the proposed approach, and a formal evaluation is carried out based on a large-scale case study. © 2013, Springer Science+Business Media New York.},
  comment       = {37},
  document_type = {Article},
  doi           = {10.1007/s11219-013-9197-z},
  source        = {Scopus},
  url           = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84875049200&doi=10.1007%2fs11219-013-9197-z&partnerID=40&md5=ad822ef7f6b285eb153f76658a503708},
}

@InProceedings{Engineering,
  author    = {Engineering, ACM Special Interest Group on Software. and {ACM Digital Library.} and {Association for Computing Machinery.} and {Institute of Electrical and Electronics Engineers.}},
  title     = {{Evaluating Bug-Fixingin SoftwareProduct Lines: an Industrial Case Study}},
  booktitle = {International Symposium on Empirical Software Engineering and Measurement},
  year      = {2016},
  file      = {:C\:/Users/HP/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Engineering et al. - Unknown - EvaluatingBug-FixinginSoftwareProduct Lines an IndustrialCase Study.pdf:pdf},
  isbn      = {9781450344272},
  review    = {CE DT CONG},
}

@InProceedings{IEEEComputerSociety.TechnicalCouncilonSoftwareEngineering.2008,
  author    = {{IEEE Computer Society. Technical Council on Software Engineering.}},
  title     = {{Evolving Software Product Lines with Aspects: An Empirical Study on Design Stability}},
  booktitle = {International Conference on Software Engineering},
  year      = {2008},
  pages     = {882},
  publisher = {ACM},
  abstract  = {"ACM order number 529081."},
  file      = {:C\:/Users/HP/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/IEEE Computer Society. Technical Council on Software Engineering. - 2008 - Evolving Software Product Lines with Aspects An Empirical Stu.pdf:pdf},
  isbn      = {9781605580791},
  review    = {CE PM DRQ CONG},
}

@InProceedings{Thurimella2008,
  author    = {Thurimella, Anil Kumar and Bruegge, Bernd and Creighton, Oliver},
  title     = {{Identifying and exploiting the similarities between rationale management and variability management}},
  booktitle = {International Software Product Line Conference},
  year      = {2008},
  pages     = {99--108},
  publisher = {IEEE Computer Society},
  abstract  = {Modeling variability is a challenging issue in product line requirements engineering. Particular problems include, the instantiation of variations for individual products, the long-term evolution of the product line, and the support of collaboration between stakeholders. These problems are even more complicated when the product line organization is globally distributed. To address theses problems, this paper identifies four higher-level similarities between rationale management (which focus on knowledge management during software design) and variability management. Furthermore, exploiting the similarities, rationale management is combined with variability management to contribute issue-based variability modeling. Issue-based variability modeling was implemented and empirically evaluated based on a series of case studies with multi-case design. The results of the evaluation show that our approach improves the instantiation and evolution of variability, enables better informal collaboration between distributed stakeholders with different levels of modeling expertise and enhances the longevity of product lines. {\textcopyright} 2008 IEEE.},
  doi       = {10.1109/SPLC.2008.14},
  file      = {:C\:/Users/HP/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Thurimella, Bruegge, Creighton - 2008 - Identifying and exploiting the similarities between rationale management and variability managem.pdf:pdf},
  isbn      = {9780769533032},
  review    = {CE PM DRQ CONG},
}

@InProceedings{Almeida2012,
  author    = {de) Almeida, Eduardo (Eduardo Santana and {ACM Digital Library.}},
  title     = {{Identifying Improvement Potential in Evolving Product Line Infrastructures: 3 Case Studies}},
  booktitle = {International Software Product Line Conference},
  year      = {2012},
  publisher = {ACM},
  abstract  = {Title from content provider.},
  file      = {:C\:/Users/HP/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Almeida, ACM Digital Library. - 2012 - Identifying Improvement Potential in Evolving Product Line Infrastructures 3 Case Studies.pdf:pdf},
  isbn      = {9781450310949},
  review    = {CE PM DRQ DD EE CONG},
}

@InProceedings{Kishi,
  author    = {Kishi, Tomoji and Jarzabek, Stan and Gnesi, Stefania and {Association for Computing Machinery} and {ACM Digital Library.}},
  title     = {{Managing Cloned Variants: A Framework and Experience}},
  booktitle = {International Software Product Line Conference},
  year      = {2013},
  pages     = {286},
  file      = {:C\:/Users/HP/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Kishi et al. - Unknown - Managing Cloned Variants A Framework and Experience.pdf:pdf},
  isbn      = {9781450319683},
  review    = {CE PM DRQ DD EE DT CONG},
}

@InProceedings{Myllarniemi2013,
  author    = {Myll{\"{a}}rniemi, Varvana and Savolainen, Juha and M{\"{a}}nnist{\"{o}}, Tomi},
  title     = {{Performance variability in software product lines: A case study in the telecommunication domain}},
  booktitle = {International Software Product Line Conference},
  year      = {2013},
  pages     = {32--41},
  abstract  = {In the research on software product lines, product variants typically differ by their functionality, and quality attributes are more or less similar across products. To accumulate empirical evidence, this paper presents a descriptive case study of performance variability in a software product line of mobile network base stations. The goal is to study the motivation to vary performance, and the strategy for realizing performance variability in the product line architecture. The results highlight that the evolution of customer needs motivates performance variability; performance variability can be realized either with software or hardware variability strategy, with the latter often being prevailing; and the software strategy can be kept focused by downgrading performance. {\textcopyright} 2013 ACM.},
  doi       = {10.1145/2491627.2491631},
  file      = {:C\:/Users/HP/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Myll{\"{a}}rniemi, Savolainen, M{\"{a}}nnist{\"{o}} - 2013 - Performance variability in software product lines A case study in the telecommunication domai.pdf:pdf},
  isbn      = {9781450319683},
  keywords  = {architecture,case study,software product line,variability},
  review    = {CE PM DRQ DD ARQ AD CONG},
}

@InProceedings{Ganesan2006,
  author    = {Ganesan, Dharmalingam and Muthig, Dirk and Yoshimura, Kentaro and Europe, Hitachi},
  title     = {{Predicting Return-on-Investment for Product Line Generations}},
  booktitle = {International Software Product Line Conference},
  year      = {2006},
  abstract  = {The decision of an organization to introduce product line engineering depends on a sound and careful analysis of risks and return on investment. The latter is computed by an economic model, which relies on high quality input and must reflect the envisioned migration strategy sufficiently. To facilitate risk analysis, this paper applies Monte-Carlo simulation to an existing product line economic model. Additionally, the model is extended by the support of product line generations that is, considering the degeneration of product line infrastructures and taking reinvestment into an existing product line into account. The practical application of the model is demonstrated by an industrial case study.},
  file      = {:C\:/Users/HP/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Ganesan et al. - 2006 - Predicting Return-on-Investment for Product Line Generations.pdf:pdf},
  review    = {CE PM DRQ DD EE DT ARQ AD FE AT CONG},
}

@InProceedings{Martinez2018,
  author    = {Martinez, Jabier and T{\"{e}}rnava, Xhevahire and Ziadi, Tewfik},
  title     = {{Software product line extraction from variability-rich systems: The robocode case study}},
  booktitle = {International Software Product Line Conference},
  year      = {2018},
  volume    = {1},
  pages     = {132--142},
  month     = {aug},
  publisher = {Association for Computing Machinery},
  abstract  = {The engineering of a Software Product Line (SPL), either by creating it from scratch or through the re-engineering of existing variants, it uses to be a project that spans several years with a high investment. It is often hard to analyse and quantify this investment, especially in the context of extractive SPL adoption when the related software variants are independently created by different developers following different system architectures and implementation conventions. This paper reports an experience on the creation of an SPL by reengineering system variants implemented around an educational game called Robocode. The objective of this game is to program a bot (a battle tank) that battles against the bots of other developers. The world-wide Robocode community creates and maintains a large base of knowledge and implementations that are mainly organized in terms of features, although not presented as an SPL. Therefore, a group of master students analysed this variability-rich domain and extracted a Robocode SPL. We present the results of such extraction augmented with an analysis and a quantification regarding the spent time and effort. We believe that the results and the a-posteriori analysis can provide insights on global challenges on SPL adoption. We also provide all the elements to SPL educators to reproduce the teaching activity, and we make available this SPL to be used for any research purpose.},
  doi       = {10.1145/3233027.3233038},
  file      = {:C\:/Users/HP/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Martinez, T{\"{e}}rnava, Ziadi - 2018 - Software product line extraction from variability-rich systems The robocode case study.pdf:pdf},
  isbn      = {9781450363716},
  keywords  = {Education,Extractive software product line adoption,Reverse-engineering,Robocode,Software product lines},
  review    = {CE PM DRQ ARQ CONG},
}

@InProceedings{Wille2017,
  author    = {Wille, David and Wehling, Kenny and Seidl, Christoph and Pluchator, Martin and Schaefer, Ina},
  title     = {{Variability mining of technical architectures}},
  booktitle = {International Software Product Line Conference},
  year      = {2017},
  volume    = {1},
  pages     = {39--48},
  month     = {sep},
  publisher = {Association for Computing Machinery},
  abstract  = {Technical architectures (TAs) represent the computing infrastructure of a company with all its hardware and software components. Over the course of time, the number of TAs grows with the companies' requirements and usually a large variety of TAs has to be maintained. Core challenge is the missing information on relations between the existing variants of TAs, which complicates reuse of solutions across systems. However, identifying these relations is an expensive task as architects have to manually analyze each TA individually. Restructuring the existing TAs poses severe risks as often sufficient information is not available (e.g., due to time constraints). To avoid failures in productive systems and resulting loss of profit, companies continue to create new solutions without restructuring existing ones. This increased variability in TAs represents technical debt. In this paper, we adapt the idea of variability mining from the software product line domain and present an efficient and automatic mining algorithm to identify the common and varying parts of TAs by analyzing a potentially arbitrary number of TAs in parallel. Using the identified variability information, architects are capable of analyzing the relations of TAs, identifying reuse potential, and making well-founded maintenance decisions. We show the feasibility and scalability of our approach by applying it to a real-world industrial case study with large sets of TAs.},
  doi       = {10.1145/3106195.3106202},
  file      = {:C\:/Users/HP/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Wille et al. - 2017 - Variability mining of technical architectures.pdf:pdf},
  isbn      = {9781450352215},
  keywords  = {Enterprise architecture,Technical architecture,Variability mining},
  review    = {CE PM DRQ CONG},
}

@InProceedings{ThorstenBerger,
  author    = {Thorsten Berger,},
  title     = {{Variability Modeling in the Wild}},
  booktitle = {International Software Product Line Conference},
  year      = {2012},
  pages     = {287},
  file      = {:C\:/Users/HP/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Unknown - Unknown - Variability Modeling in the Wild.pdf:pdf},
  isbn      = {9781450310956},
  review    = {CE PM DRQ CONG},
}

@Comment{jabref-meta: databaseType:bibtex;}
